@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Assert Web Content created From Structure is published Via SAP"
	@priority = "4"
	test AssertWebContentFromStructureNotBeDeletedOnLiveViaSAP {
		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Site Name",
				title = "WC 1");
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(siteName = "Site Name");
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template with all fields") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Add first web content based on new structure and template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "WC WebContent Title 1",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "WC WebContent Title 1");
		}

		task ("Publish first web content via SAP") {
			Staging.publishViaSAP(
				confirmMessage = "Are you sure you want to publish the selected web content?",
				entry = "WC WebContent Title 1");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 1");
		}

		task ("Delete first web content via SAP") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			WebContent.deleteStagedCP(
				pageName = "Staging Test Page",
				siteName = "Site Name",
				webContentTitle = "WC WebContent Title 1");
		}

		task ("Add second web content based on new structure and template") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "2",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "2",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_2.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field 2",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field 2",
				webContentTitle = "WC WebContent Title 2",
				webContentUpload = "Document_3.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "WC WebContent Title 2");
		}

		task ("Publish first web content via SAP") {
			Staging.publishViaSAP(
				confirmMessage = "Are you sure you want to publish the selected web content?",
				entry = "WC WebContent Title 2");
		}

		task ("Verify both Web Content exist") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 1");

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 2");
		}
	}

	@description = "This is a use case for LPS-121695. Assert imported DDMStructures in Global Staging are not published in Global Live."
	@priority = "4"
	test ImportedDDMStructuresInGlobalStagingNotPublishedInLive {
		property test.name.skip.portal.instance = "WebContentStaging#ImportedDDMStructuresInGlobalStagingNotPublishedInLive";

		task ("Access Global Site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");
		}

		task ("Add a web content structure") {
			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Export DDMStructures") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Add Portal Instance") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Activate local staging in the created portal instance global site") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");

			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Staging");

			Staging.activateStagingCP(siteName = "Global");
		}

		task ("Import DDMStructures") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global-staging");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Assert DDMStructures has been imported in Global staging") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global-staging");

			NavItem.gotoStructures();

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			NavItem.gotoTemplates();

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			WebContentTemplates.viewTableEntryCP(
				templateDescription = "WC Template Description",
				templateName = "WC Template Name");
		}

		task ("Assert DDMStructures has not been imported in Global Live") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			NavItem.gotoStructures();

			AssertElementNotPresent(
				key_ddlDataDefinitionName = "WC Structure Name",
				locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

			NavItem.gotoTemplates();

			AssertElementNotPresent(
				key_tableEntry = "WC Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY");
		}
	}

	@description = "Publish in Staging a Web Content From Structure"
	@priority = "5"
	test PublishInStagingWebContentFromStructure {
		property portal.acceptance = "true";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Site Name",
				title = "WC 1");
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(siteName = "Site Name");
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template with all fields") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure and template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();
		}

		task ("Publish Web Content to live") {
			Staging.publishToLiveNowViaPortletCP();
		}

		task ("View web content in live") {
			ProductMenu.gotoLiveSite(site = "Site Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			AssertTextEquals.assertPartialText(
				key_webContentTitle = "Web Content Title",
				locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
				value1 = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-75802."
	@priority = "5"
	test PublishWebContentWithImportedStructureDefaultValues {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Staging#PublishWebContentWithImportedStructureDefaultValues";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Site Name",
				title = "WC 1");
		}

		task ("Create structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Set default values for the structure") {
			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				structureName = "WC Structure Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "(Enter Text Here)",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.save();
		}

		task ("Create a template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Create and Publish Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Export web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Create another site") {
			JSONGroup.addGroup(groupName = "Site Name B");
		}

		task ("Enable Staging in created site") {
			Staging.openStagingAdmin(siteURLKey = "site-name-b");

			Staging.activateStagingCP(siteName = "Site Name B");
		}

		task ("Import web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-b-staging");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Assert web content has been imported in staging") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-b-staging");

			WebContent.viewWithStructureCP(
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "site-name-b-staging");

			Staging.publishCustomPublication();
		}

		task ("Assert no error") {
			AssertConsoleTextNotPresent(value1 = "ConstraintViolationException");

			AssertConsoleTextNotPresent(value1 = "SystemException");
		}

		task ("Assert web content has been published") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-b");

			AssertTextEquals.assertPartialText(
				key_webContentTitle = "Web Content Title",
				locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
				value1 = "Web Content Title");
		}

		task ("Delete created site") {
			JSONGroup.deleteGroupByName(groupName = "Site Name B");
		}
	}

	@description = "This is a use case for LPS-77728."
	@priority = "5"
	test StagingDraftWebContent {
		property portal.acceptance = "true";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Site Name",
				title = "WC 1");
		}

		task ("Create structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Create a web content as draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				saveAsDraft = "true",
				structureName = "WC Structure Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "(Enter Text Here)",
				webContentTitle = "WC WebContent Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			VerifyElementPresent(locator1 = "Message#SUCCESS");
		}

		task ("Assert web content draft exists") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoViewStatus(
				webContentStatus = "DRAFT",
				webContentTitle = "WC WebContent Title");
		}

		task ("Activate Staging with page versioning") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(
				pageVersioningEnabled = "true",
				siteName = "Site Name");
		}

		task ("Check web content draft is not present in staging") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			AssertTextNotPresent(value1 = "WC WebContent Title");
		}

		task ("Check web content draft is not present in life") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-life");

			AssertTextNotPresent(value1 = "WC WebContent Title");
		}
	}

	@description = "This is a use case for LPS-82431."
	@priority = "5"
	test StagingEditWebContents {
		property portal.acceptance = "true";

		task ("Create three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

				WebContentNavigator.gotoAddCP();

				WebContent.addCP(
					webContentContent = "WC WebContent Content",
					webContentTitle = "${webContentTitle}");

				PortletEntry.publish();

				WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(siteName = "Site Name");
		}

		task ("Edit the web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

				WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

				WebContent.editCP(
					webContentContentEdit = "WC WebContent Content Edit",
					webContentTitle = "${webContentTitle}",
					webContentTitleEdit = "${webContentTitle} Edit");
			}
		}

		task ("Assert web content has been edited") {
			for (var webContentTitle : list "WC WebContent Title 1 Edit,WC WebContent Title 2 Edit,WC WebContent Title 3 Edit") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}
	}

}