@component-name = "portal-segmentation"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Add segment in Test Site Name") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "EditSegment Test",
				text = "liferay");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Navigator.openURL();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-102740 Validate if the user can edit a segment with Properties Country"
	@priority = "5"
	@uitest
	test EditSegmentUserByOrganizationCountry {
		property portal.acceptance = "true";

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Edit the segment") {
			Segmentation.editSegment(entry = "EditSegment Test");

			Segmentation.fillTitle(titleField = "EditSegmentUserByCountry Test");

			Segmentation.deleteProperties();

			Segmentation.gotoSidebar(fieldType = "Organization");

			Segmentation.addProperties(propertyOption = "Country");

			Segmentation.changeCriterionInput(criterionInputOption = "Equals");

			Segmentation.fillProperty(optionsValue = "China");

			Button.clickSave();
		}

		task ("Assert segment edited") {
			Segmentation.editSegment(entry = "EditSegmentUserByCountry Test");

			Segmentation.viewSegment(
				criterion = "options",
				value = "china");
		}
	}

	@description = "LPS-102740 Validate if the user can edit a segment with Properties Region"
	@priority = "5"
	@uitest
	test EditSegmentUserByOrganizationRegion {
		property portal.acceptance = "true";

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Edit the segment") {
			Segmentation.editSegment(entry = "EditSegment Test");

			Segmentation.deleteProperties();

			Segmentation.gotoSidebar(fieldType = "Organization");

			Segmentation.addProperties(propertyOption = "Region");

			Segmentation.fillProperty(optionsValue = "Spain - Madrid");

			Segmentation.fillTitle(titleField = "EditSegmentUserByRegion Test");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Assert segment edited") {
			Segmentation.editSegment(entry = "EditSegmentUserByRegion Test");

			Segmentation.viewSegment(
				criterion = "options",
				value = "madrid");
		}
	}

	@description = "LPS-102743 Validate if the user can edit a segment with Properties Session URL"
	@priority = "5"
	@uitest
	test EditSegmentUserBySessionURL {
		property portal.acceptance = "true";

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Edit the segment") {
			Segmentation.editSegment(entry = "EditSegment Test");

			Segmentation.fillTitle(titleField = "EditSegmentUserBySessionURL Test");

			Segmentation.deleteProperties();

			Segmentation.gotoSidebar(fieldType = "Session");

			Segmentation.addProperties(propertyOption = "URL");

			Segmentation.fillProperty(propertyField = "http://localhost:8080");

			Button.clickSave();
		}

		task ("Assert segment edited") {
			Segmentation.editSegment(entry = "EditSegmentUserBySessionURL Test");

			Segmentation.viewSegment(propertyField = "http://localhost:8080");
		}
	}

	@description = "Validate if the user can edit a segment with User Tag"
	@priority = "5"
	@uitest
	test EditSegmentUserByUserTag {
		property portal.acceptance = "true";

		task ("Add user with tag") {
			JSONUser.addUser(
				assetTagNames = "tagname",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Edit the segment") {
			Segmentation.editSegment(entry = "EditSegment Test");

			Segmentation.deleteProperties();

			Segmentation.addProperties(propertyOption = "Tag");

			Segmentation.fillProperty(selectLink = "tagname");

			Segmentation.fillTitle(titleField = "EditSegmentUserByUserTag Test");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Assert segment edited") {
			Segmentation.editSegment(entry = "EditSegmentUserByUserTag Test");

			Segmentation.viewSegment(
				criterion = "select-input",
				value = "tagname");
		}
	}

	@description = "Validate if the user can edit a segment with Properties User and Email Segment with Contains to Equals Option"
	@priority = "5"
	@uitest
	test EditSegmentUserEmailAddressContainsToEquals {
		property portal.acceptance = "true";

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Edit the segment") {
			Segmentation.editSegment(entry = "EditSegment Test");

			Segmentation.fillTitle(titleField = "EditSegmentUserEmailAddressContainsToEquals Test");

			Segmentation.changeCriterionInput(criterionInputOption = "Equals");

			Button.clickSave();
		}

		task ("Assert segment edited") {
			Segmentation.editSegment(entry = "EditSegmentUserEmailAddressContainsToEquals Test");

			Segmentation.viewSegment(criterionInputOption = "eq");
		}
	}

}