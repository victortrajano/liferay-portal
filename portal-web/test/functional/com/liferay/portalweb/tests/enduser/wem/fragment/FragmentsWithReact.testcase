@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-122082 and LPS-122641. Can not edit and export react fragment. View react fragment has a visual marker in vertical card."
	@priority = "5"
	@uitest
	test CannotEditAndExportReactFragment {
		property portal.acceptance = "true";

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Import the react fragment") {
			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "react-fragment-example.zip");
		}

		task ("Assert react fragment is imported") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "React Fragment Example");
		}

		task ("Assert react fragment has a visual marker in vertical card") {
			LexiconCard.viewCardSticker(
				card = "React Fragment Example",
				icon = "react");
		}

		task ("Assert the react fragment is not editable") {
			AssertElementNotPresent(
				key_card = "React Fragment Example",
				locator1 = "Card#CARD_TITLE_LINK");

			Click.waitForMenuToggleJSClick(
				key_card = "React Fragment Example",
				locator1 = "Card#CARD_ELLIPSIS");

			MenuItem.viewNotPresent(menuItem = "Edit");
		}

		task ("Assert the react fragment is not exported") {
			MenuItem.viewNotPresent(menuItem = "Export");
		}
	}

	@description = "This is a test for LPS-122082. Can not export react fragment with collection."
	@priority = "4"
	test CannotExportReactFragmentWithCollection {
		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Import the react fragment") {
			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "react-fragment-example.zip");
		}

		task ("Assert react fragment is imported") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "React Fragment Example");
		}

		task ("Export the fragment collection") {
			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Export");

			DownloadTempFile();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "New Site Name");
		}

		task ("Navigate to fragments admin in the new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "new-site-name");
		}

		task ("Import the fragment collection into the new site") {
			FragmentsAdmin.importCollectionFromTempFolder();
		}

		task ("Navigate to the fragment collection in the new site") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Assert react fragment is not shown") {
			FragmentsAdmin.viewEntryNotPresent(entry = "React Fragment Example");
		}
	}

	@description = "This is a test for LPS-129182. View react fragment is rendered correctly in page."
	@priority = "5"
	test ViewReactFragmentInPage {
		property portal.acceptance = "true";

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Import the react fragment") {
			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "react-fragment-example.zip");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a react fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "React Fragment Example");
		}

		task ("Assert the react fragment is rendered correctly in page editor") {
			PageEditor.viewFragment(fragmentName = "React Fragment Example");

			AssertVisible(locator1 = "//h1[normalize-space(text())='Hello World']");

			PageEditor.clickPublish();
		}

		task ("Assert the react fragment is rendered correctly in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "//h1[normalize-space(text())='Hello World']");
		}
	}

}