@component-name = "portal-collaboration"
definition {

	property osgi.module.configuration.file.names = "com.liferay.translation.web.internal.configuration.FFLayoutExperienceSelectorConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Translations Management";

	// This testcase validates the import/export functionality of the Content Page translations feature for both default and custom experiences.

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that the user can export an available language for multiple experiences."
	@priority = "5"
	test CanExportAnAvailableLanguageForMultipleExperiences {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		for (var num : list "1,2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage",
				siteName = "Guest");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience${num}",
				segmentName = "Anyone");
		}

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience1,NewAnyoneExperience2",
			languageList = "Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage-en_US.zip");

		for (var translationFileName : list "TranslationContentPage (NewAnyoneExperience1)-en_US-es_ES,TranslationContentPage (NewAnyoneExperience2)-en_US-es_ES") {
			Translations.assertUnzippedFileNameFromTempFolder(translationFileName = "${translationFileName}");
		}
	}

	@description = "This ensures that the user can export multiple available languages for a single experience."
	@priority = "5"
	test CanExportMultipleAvailableLanguagesForExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage-en_US.zip");

		for (var translationFileName : list "TranslationContentPage (NewAnyoneExperience)-en_US-ja_JP,TranslationContentPage (NewAnyoneExperience)-en_US-es_ES") {
			Translations.assertUnzippedFileNameFromTempFolder(translationFileName = "${translationFileName}");
		}
	}

	@description = "This ensures that the user can export multiple available languages for multiple experiences."
	@priority = "5"
	test CanExportMultipleAvailableLanguagesForMultipleExperiences {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage-en_US.zip");

		for (var translationFileName : list "TranslationContentPage-en_US-ja_JP,TranslationContentPage-en_US-es_ES,TranslationContentPage (NewAnyoneExperience)-en_US-ja_JP,TranslationContentPage (NewAnyoneExperience)-en_US-es_ES") {
			Translations.assertUnzippedFileNameFromTempFolder(translationFileName = "${translationFileName}");
		}
	}

	@description = "This ensures that the user can export multiple available languages of default experience for translation."
	@priority = "5"
	test CanExportWithMultipleLanguages {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Paragraph");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can export a single available language of default experience for translation."
	@priority = "5"
	test CanExportWithSingleLanguage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)",
			viewNoExperiencesSelector = "true");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can import the exported content page xliff file with 1.2 version."
	@priority = "5"
	test CanImportExportedCustomizeXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			exportFileFormat = "XLIFF 1.2",
			languageList = "Japanese (Japan)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "utf8",
			fragmentContent = "Heading",
			fragmentContentTranslation = "タイトル",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "翻訳ページ",
			translationFileName = "TranslationContentPage-en_US-ja_JP",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-ja_JP.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "ja-JP",
			status = "Approved",
			title = "Translation of TranslationContentPage to ja-JP");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "ja-JP");

		PageEditor.viewFragmentEditableText(
			editableText = "タイトル",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "ja");

		Page.viewCurrentPage(pageName = "翻訳ページ");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "タイトル");
	}

	@description = "This ensures that the user can import the exported content page xliff file with default version."
	@priority = "5"
	test CanImportExportedDefaultXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Titulo");
	}

	@description = "This ensures that imported translation for a content page experience can be merged to the correct experience of a content page."
	@priority = "5"
	test CanImportExportedTranslationForCorrespondingExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickManagementBar();

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			translationFileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading Example");

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Titulo");
	}

	@description = "This ensures that the user can not import an invalid translation file."
	@priority = "4"
	test CannotImportAnInvalidFile {
		for (var num : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}");
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage1");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage1-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage1-en_US-es_ES.xlf",
			filePath = "",
			pageName = "TranslationContentPage2",
			validateInvalidFile = "true");

		Translations.viewErrorMessages(
			errorMessage = "1 Error: Some files could not be published, check them and upload another file.",
			errorMessageItem = "The translation file does not correspond to this page.");
	}

	@description = "This ensures that the translation for a content page experience can not be imported after deleting the experience."
	@priority = "5"
	test CannotImportTranslationForDeletedExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Spanish (Spain)");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "unzip-temp-file -DfileName=TranslationContentPage-en_US.zip");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.deleteExperience(experienceName = "NewAnyoneExperience");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf",
			filePath = "",
			pageName = "TranslationContentPage",
			validateInvalidFile = "true");

		Translations.viewErrorMessages(
			errorMessage = "1 Error: Some files could not be published, check them and upload another file.",
			errorMessageItem = "The translation file does not correspond to this page.");
	}

	@description = "This is a test for LPS-144152. This ensures that the updated draft translation can be published."
	@priority = "3"
	test CanPublishUpdatedDraftTranslation {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage",
			save = "true",
			successMessage = "1 File Saved");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Draft",
			title = "Translation of TranslationContentPage to es-ES");

		LexiconEntry.gotoEntry(rowEntry = "Translation of TranslationContentPage to es-ES");

		Translations.translateFragmentField(
			fieldName = "element-text",
			fragmentText = "NewTitulo");

		PortletEntry.publish();

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Approved",
			title = "Translation of TranslationContentPage to es-ES");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "NewTitulo");
	}

	@description = "This ensures that the user can import the translated content page file with Button fragment."
	@priority = "5"
	test CanTranslateAndImportButtonFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.editFragmentText(
			fragmentName = "Button",
			id = "link",
			text = "Title");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Title",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Approved",
			title = "Translation of TranslationContentPage to es-ES");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Button",
			id = "link");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "button",
			id = "link",
			text = "Title");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "button",
			id = "link",
			text = "Titulo");
	}

	@description = "This ensures that the user can import the translated content page file with HTML fragment."
	@priority = "5"
	test CanTranslateAndImportHTMLFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditor.editFragmentHTML(
			content = "HTMLTitle",
			fragmentName = "HTML",
			id = "element-html");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "HTMLTitulo",
			fragmentName = "HTML",
			id = "element-html");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "html",
			id = "element-html",
			text = "HTMLTitle");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "html",
			id = "element-html",
			text = "HTMLTitulo");
	}

	@description = "This ensures that only the valid translation files can be uploaded from a zip file."
	@priority = "5"
	test OnlyValidEntriesAreUploadedFromZip {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "ContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "ContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.updateTranslateFileID(
			translationEntryType = "Layout",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "标题",
			operation = "false",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContent页面",
			translationFileName = "ContentPage-en_US-zh_CN",
			translationZipFileName = "ContentPage-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "見出し",
			operation = "zip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentページ",
			translationFileName = "ContentPage-en_US-ja_JP",
			translationZipFileName = "ContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			errorMessage = "1 Error: Some files could not be published, check them and upload another file.",
			errorMessageItem = "The translation file does not correspond to this page.",
			failFileName = "ContentPage-en_US-es_ES.xlf",
			fileName = "ContentPage-en_US_translated.zip",
			filePath = "",
			pageName = "ContentPage",
			successFileName = "ContentPage-en_US-ja_JP.xlf",
			successFileName2 = "ContentPage-en_US-zh_CN.xlf",
			successFileNumber = "2 Files Saved");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewNoTranslationEntry(title = "Translation of ContentPage to es_ES");

		for (var language : list "ja-JP,zh-CN") {
			Translations.viewTranslationEntry(
				language = "${language}",
				status = "Approved",
				title = "Translation of ContentPage to ${language}");
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "zh-CN");

		PageEditor.viewFragmentEditableText(
			editableText = "标题",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.changeLocale(
			currentLocale = "zh-CN",
			locale = "ja-JP");

		PageEditor.viewFragmentEditableText(
			editableText = "見出し",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		Navigator.ensureLocaleURL(locale = "zh");

		Page.viewCurrentPage(pageName = "TranslatedContent页面");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "标题");

		ContentPagesNavigator.openViewContentPage(
			locale = "ja",
			pageName = "ContentPage",
			siteName = "Guest");

		Page.viewCurrentPage(pageName = "TranslatedContentページ");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "見出し");
	}

}