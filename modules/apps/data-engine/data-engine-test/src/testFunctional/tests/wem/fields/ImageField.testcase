@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This test ensures that a user can clear the uploaded image from form by clicking on Clear button."
	@priority = "4"
	test ClearUploadedImage {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentTitle = "${webTitle}");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertClick(
			key_fieldFieldLabel = "Image",
			locator1 = "AppBuilder#CLEAR_SEARCH",
			value1 = "Clear");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Image",
			key_image = "Document_1.jpg",
			locator1 = "WCEditWebContent#IMAGE_PICKER_PREVIEW");
	}

	@description = "This test ensures that a user can add the image field to the builder."
	@priority = "5"
	test DragAndDropImageFieldToBuilder {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var newLabel = "Image";

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${newLabel}",
			fieldName = "Image");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "${newLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "${newLabel}");
	}

	@description = "This test ensures that a user can duplicate the Image field on the builder."
	@priority = "4"
	test DuplicateImageField {
		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Image");

		WebContentStructures.saveCP();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

		DataEngine.addRepeatableField(fieldLabel = "Image");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		for (var n : list "1,2") {
			DataEngine.assertFieldRepeated(
				fieldName = "Image",
				index = "${n}");
		}

		AssertVisible(
			key_fieldName = "Image",
			key_index = "2",
			locator1 = "FormFields#FIELD_REMOVE");
	}

	@description = "This test aims to verify if label from image field can be translated."
	@priority = "4"
	test LocalizationOfImageFieldPersists {
		property portal.acceptance = "false";

		var structureTitle = "Test";
		var structureTitlePt = "Teste";
		var fieldLabelEn = "Text EN";
		var fieldLabelPt = "Text PT";

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${fieldLabelEn}",
			fieldName = "Image");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		WebContentStructures.addTranslations(localeList = "pt-BR");

		PortletEntry.changeLocale(locale = "pt-BR");

		WebContentStructures.addName(structureName = "${structureTitlePt}");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "${fieldLabelEn}",
			label = "${fieldLabelPt}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		PortletEntry.changeLocale(locale = "pt-BR");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "${structureTitlePt}");
	}

	@description = "This test aims to verify if the user is required to define a description for an uploaded image."
	@priority = "4"
	test PublishWebContentWithUploadedImageWithoutDescription {
		var structureTitle = "Image Field Structure";
		var webContentName = "Web Content";
		var fileName = "Document_1.jpg";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "${fileName}");

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		WebContentStructures.saveCP();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentTitle = "${webContentName}");

		Button.clickPublish();

		NavItem.gotoStructures();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		DataEngine.editFieldRequired(fieldFieldLabel = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentName}");

		Button.clickPublish();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "This field is required.");

		WebContent.setImageDescription(
			fieldFieldLabel = "Image",
			webContentImageDescription = "Description");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentName}");

		AssertTextEquals(
			key_fieldFieldLabel = "Image",
			locator1 = "WCEditWebContent#IMAGE_DESCRIPTION",
			value1 = "Description");
	}

	@description = "This test ensures that a user can define a help text."
	@priority = "4"
	test SetHelpTextOfImageField {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var newLabel = "Image";
		var fieldHelp = "Help Text";
		var key_fieldFieldLabel = "${newLabel}";

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${newLabel}",
			fieldName = "Image");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		DataEngine.editFieldTip(
			fieldFieldLabel = "${newLabel}",
			fieldHelp = "${fieldHelp}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "${newLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "${newLabel}");

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_TEXT",
			value1 = "${fieldHelp}");
	}

	@description = "This test aims to verify if user can define a description for the uploaded image."
	@priority = "4"
	test SetImageDescriptionOnWebContent {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentImageDescription = "My description",
			webContentTitle = "${webTitle}");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertTextEquals(
			key_fieldFieldLabel = "Image",
			locator1 = "WCEditWebContent#IMAGE_DESCRIPTION",
			value1 = "My description");
	}

	@description = "This test ensures that user can set the image field as repeatable."
	@priority = "3"
	test SetImageFieldAsRepeatable {
		var structureTitle = "Image field Structure";

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Image");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertElementNotPresent(locator1 = "Icon#ASTERISK");
	}

	@description = "This test ensures that user can set the image field label."
	@priority = "5"
	test SetLabelOfImageField {
		property portal.acceptance = "false";

		var structureTitle = "Image Field Structure";
		var newFieldLabel = "Text";
		var fieldLabel = "Image Field";

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${fieldLabel}",
			fieldName = "Image");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertElementPresent(
			key_fieldFieldLabel = "${fieldLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		DataEngine.editFieldLabel(
			fieldFieldLabel = "${fieldLabel}",
			fieldFieldLabelEdit = "${newFieldLabel}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertElementPresent(
			key_fieldFieldLabel = "${newFieldLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This test ensures that a user can upload an image from Liferay Documents and Media."
	@priority = "5"
	test UploadImageFromDocumentsAndMedia {
		property portal.acceptance = "true";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentTitle = "${webTitle}");

		Button.clickPublish();

		WebContent.viewWithStructureCP(
			webContentImage = "Document Title",
			webContentTitle = "${webTitle}");
	}

}