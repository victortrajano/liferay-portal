@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@priority = "5"
	test AddAndViewStructureAndTemplateWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property testray.component.names = "Permissions,Roles,Training,Web Content Administration";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Home");

		JSONRole.addRegularRole(
			roleKey = "Regular Role Name",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_ARTICLE",
			resourceName = "com.liferay.journal",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "Regular Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "Site Member",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_ARTICLE",
			resourceName = "com.liferay.journal",
			roleTitle = "Site Member",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Site Member",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Site Member",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Site Member",
			roleType = "site");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(
			addRoleViewPermissions = "Regular Role Name",
			structureName = "WC Structure Name");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,Site Member");

		IFrame.closeFrame();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		WebContentTemplates.gotoTemplateEllipsisItem(
			item = "Permissions",
			templateName = "WC Template Name");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Regular Role Name");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,Site Member");

		SelectFrameTop();

		Refresh();

		for (var number : list "1,2") {
			JSONUser.addUser(
				userEmailAddress = "user${number}@liferay.com",
				userFirstName = "userfn${number}",
				userLastName = "userln${number}",
				userScreenName = "usersn${number}");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user${number}@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "user${number}@liferay.com");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role Name",
			userEmailAddress = "user1@liferay.com");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.viewCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.viewCP(
			templateDescription = "WC Template Description",
			templateName = "WC Template Name",
			userEditPermission = "noEditPermission");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "user2@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		AssertTextNotPresent(value1 = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		AssertTextNotPresent(value1 = "WC Template Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Role.openRolesAdmin();

		Role.definePermissionsCP(
			permissionDefinitionKeys = "SITE_ADMIN_CONTENT_WEB_CONTENT_RESOURCE_PERMISSIONS_WEB_CONTENT_FOLDER_ADD_SUBFOLDER_CHECKBOX,SITE_ADMIN_CONTENT_WEB_CONTENT_RESOURCE_PERMISSIONS_WEB_CONTENT_FOLDER_ADD_WEB_CONTENT_CHECKBOX,SITE_ADMIN_CONTENT_WEB_CONTENT_RESOURCE_PERMISSIONS_WEB_CONTENT_FOLDER_VIEW_CHECKBOX,SITE_ADMIN_CONTENT_WEB_CONTENT_RESOURCE_PERMISSIONS_WEB_CONTENT_ARTICLE_UPDATE_CHECKBOX",
			roleTitle = "Regular Role Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.addSubfolderCP(
			folderName = "WC Folder Name",
			subfolderDescription = "WC SubFolder Description",
			subfolderName = "WC SubFolder Name");
	}

	@priority = "4"
	test AddWebContentRemoveGuestViewPermission {
		property test.name.skip.portal.instance = "WebContentWithPermissions#AddWebContentRemoveGuestViewPermission";
		property testray.component.names = "Permissions,Web Content Administration";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.enableCheckbox(fieldName = "articleViewPermissionsCheckEnabled");

		SystemSettings.saveConfiguration();

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		PermissionsInline.gotoWCArticle(webContentTitle = "WC WebContent Title");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "WCD Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "WCD Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "WCD Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "WCD Page",
			siteName = "Test Site Name");

		PermissionsInline.gotoConfigurationPG();

		AssertChecked(
			key_roleTitle = "guest",
			locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

		SelectFrame(value1 = "relative=top");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "WCD Page",
			siteName = "Test Site Name");

		AssertTextNotPresent(value1 = "Web Content Display");

		AssertTextNotPresent(value1 = "WC WebContent Content");
	}

}