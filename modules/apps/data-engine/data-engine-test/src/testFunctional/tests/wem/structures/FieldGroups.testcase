@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-98077. As a Developer, I want to the ability to nest fields"
	@ignore = "true"
	@priority = "5"
	test ChangeFieldGroupPositionOnForm {
		property portal.acceptance = "false";

		// TODO LPS-98077 ChangeFieldGroupPositionOnForm pending implementation

	}

	@description = "This is a test for LPS-98077. Make sure data inserted on a Group Field persists"
	@priority = "3"
	test CheckIfFieldGroupDataPersists {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		WebContentStructures.saveCP();

		Navigator.gotoNavTab(navTab = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentNumeric = "12345",
			webContentText = "This is Text Field",
			webContentTitle = "WC Web Content Title");

		PortletEntry.publish();

		WebContent.viewWithStructureCP(
			webContentNumeric = "12345",
			webContentText = "This is Text Field",
			webContentTitle = "WC Web Content Title");
	}

	@description = "This is a test for LPS-98077. As a Developer, I want to the ability to nest fields"
	@ignore = "true"
	@priority = "3"
	test CheckWebContentUponDeletingFieldGroup {
		property portal.acceptance = "false";

		// TODO LPS-98077 CheckWebContentUponDeletingFieldGroup pending implementation
	}

	@description = "This is a test for LPS-98077. Group two or more fields into a FieldGroup"
	@priority = "5"
	test CreateFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldToFieldsGroup(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			fieldsGroupLabel = "Fields Group");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}
	}

	@description = "This is a test for LPS-98077. Delete a field from a FieldGroup then save and reopen the Structure"
	@priority = "4"
	test DeleteAFieldFromAFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.delete(fieldFieldLabel = "Numeric");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		for (var label : list "Fields Group,Text") {
			AssertVisible(
				key_fieldFieldLabel = "${label}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		AssertElementNotPresent(
			key_fieldFieldLabel = "Numeric",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98077. Delete a FieldGroup (remove from form view only - via kebab menu)"
	@priority = "5"
	test DeleteFieldGroupOnStructure {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.delete(fieldsGroupLabel = "Fields Group");

		for (var label : list "Fields Group,Text,Numeric") {
			AssertElementNotPresent(
				key_fieldFieldLabel = "${label}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@description = "This is a test for LPS-98077. Delete a nested FieldGroup (a FieldGroup that is placed inside another section)"
	@priority = "5"
	test DeleteNestedFieldGroupOnStructure {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			targetFieldLabel = "Numeric");

		DataEngine.delete(fieldsGroupLabel = "Fields Group");

		for (var label : list "Fields Group,Text,Numeric,Date") {
			AssertElementNotPresent(
				key_fieldFieldLabel = "${label}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@description = "This is a test for LPS-98077. Duplicate a Field Group"
	@priority = "5"
	test DuplicateAFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldToFieldsGroup(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			fieldsGroupLabel = "Fields Group");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		DataEngine.duplicate(fieldsGroupLabel = "Fields Group");

		AssertVisible(
			key_fieldFieldLabel = "Copy of Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Copy of Text,Copy of Numeric,Copy of Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		AssertVisible(
			key_fieldFieldLabel = "Copy of Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Copy of Text,Copy of Numeric,Copy of Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}
	}

	@description = "This is a test for LPS-98077. Duplicate a nested Field Group (a Field Group that is placed inside another Field Group)"
	@priority = "5"
	test DuplicateANestedFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			targetFieldLabel = "Numeric");

		Click(locator1 = "DataEngineBuilder#FORM_FIELDS_GROUP");

		Click(locator1 = "DataEngineBuilder#FORM_FIELDS_GROUP_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Duplicate");

		AssertTextEquals(
			locator1 = "DataEngineBuilder#DUPLICATED_FORM_FIELDS_GROUP_LABEL",
			value1 = "Copy of Fields Group");

		WebContentStructures.saveCP(structureName = "WC Structure Name");
	}

	@description = "This is a test for LPS-98077. As a Developer, I want to the ability to nest fields"
	@ignore = "true"
	@priority = "5"
	test DuplicateFieldGroupOnStructure {
		property portal.acceptance = "false";

		// TODO LPS-98077 DuplicateFieldGroupOnStructure pending implementation
	}

	@description = "This is a test for LPS-98077. Edit the label of the FieldGroup"
	@priority = "4"
	test EditFieldGroupLabel {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.editFieldsGroupLabel(
			fieldsGroupLabel = "Fields Group",
			fieldsGroupLabelEdit = "Fields Group Edit");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group Edit",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98077. Edit a field placed in a duplicated FieldGroup"
	@priority = "3"
	test EditFieldOnDuplicatedFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			targetFieldLabel = "Numeric");

		DataEngine.duplicate(fieldsGroupLabel = "Fields Group");

		for (var fieldName : list "Text,Numeric,Date") {
			DataEngine.editFieldLabel(
				fieldFieldLabel = "Copy of ${fieldName}",
				fieldFieldLabelEdit = "Duplicated ${fieldName}");
		}

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		for (var fieldName : list "Text,Numeric,Date") {
			DataEngine.viewField(
				fieldFieldLabel = "Duplicated ${fieldName}",
				fieldName = "${fieldName}");
		}
	}

	@description = "This is a test for LPS-98077. FieldGroup empty (remove all the fields from a section)"
	@priority = "4"
	test EmptyAFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.delete(fieldFieldLabel = "Text");

		DataEngine.delete(fieldFieldLabel = "Numeric");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var label : list "Text,Numeric") {
			AssertElementNotPresent(
				key_fieldFieldLabel = "${label}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@description = "This is a test for LPS-98077. Add a section inside of another section (nesting)"
	@priority = "3"
	test NestAFieldGroupOnAnotherFieldGroup {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Date",
			fieldName = "Date",
			targetFieldLabel = "Numeric");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric,Date") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}
	}

	@description = "This is a test for LPS-98077. Set a FieldGroup as collapsible and perform this action in a WebContent"
	@priority = "4"
	test SetFieldGroupAsCollapsibleAndExecuteOnAWebContent {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.editCollapsible(
			collapsible = "true",
			fieldsGroupLabel = "Fields Group");

		WebContentStructures.saveCP();

		Navigator.gotoNavTab(navTab = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addCP();

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}

		Click(
			key_label = "Fields Group",
			locator1 = "DDMEditStructure#FORM_COLLAPSE_BUTTON");

		AssertVisible(
			key_fieldFieldLabel = "Fields Group",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		for (var fieldFieldLabel : list "Text,Numeric") {
			AssertNotVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				key_fieldsGroupLabel = "Fields Group",
				locator1 = "DataEngineBuilder#FORM_FIELD_NESTED");
		}
	}

	@description = "This is a test for LPS-98077. Set a FieldGroup as repeatable and perform this action in a WebContent"
	@priority = "4"
	test SetFieldGroupAsRepeatableAndExecuteOnAWebContent {
		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Numeric",
			fieldName = "Numeric",
			targetFieldLabel = "Text");

		DataEngine.editFieldsGroupRepeatable();

		WebContentStructures.saveCP();

		NavItem.gotoWebContent();

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(webContentTitle = "WC WebContent Title");

		DataEngine.addRepeatableFieldsGroup(fieldsGroupLabel = "Fields Group");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		for (var fieldName : list "Text,Numeric") {
			DataEngine.assertFieldRepeated(
				fieldName = "${fieldName}",
				index = "1");
		}

		for (var fieldName : list "Text,Numeric") {
			DataEngine.assertFieldRepeated(
				fieldName = "${fieldName}",
				index = "2");
		}

		AssertElementNotPresent(
			key_fieldName = "FieldsGroup",
			key_index = "1",
			locator1 = "FormFields#FIELD_REMOVE");

		AssertVisible(
			key_fieldName = "FieldsGroup",
			key_index = "2",
			locator1 = "FormFields#FIELD_REMOVE");
	}

}