@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-109298. Each tab of Tabs fragment is able to contain any elements in content page."
	@priority = "5"
	@uitest
	test AddElementToEachPanel {
		property portal.acceptance = "true";

		task ("Add a Tabs fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Add elements into different tabs") {
			PageEditor.addElementToTab(
				collectionName = "Layout Elements",
				fragmentName = "Container",
				index = "2",
				navItem = "Tab 1",
				navTab = "Fragments",
				position = "1");

			var n = "2";

			for (var fragmentName : list "Heading,Tabs") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}

			PageEditor.addElementToTab(
				index = "9",
				navItem = "Tab 4",
				navTab = "Widgets",
				portletName = "Asset Publisher",
				position = "5");

			PageEditor.clickPublish();
		}

		task ("View no NPE thrown in server console") {
			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "This is for LPS-109298. Each tab of Tabs fragment is able to contain any elements in custom master."
	@priority = "4"
	test AddElementToEachPanelInMasterPageTemplate {
		property testray.main.component.name = "Master Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a Tabs fragment to custom master footer") {
			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Footer",
				fragmentName = "Tabs",
				scope = "Master");
		}

		task ("Add Container to Tab1 and Heading to Tab2, Tabs to Tab3, Asset Publisher to Tab4") {
			PageEditor.addElementToTab(
				collectionName = "Layout Elements",
				fragmentName = "Container",
				index = "2",
				navItem = "Tab 1",
				navTab = "Fragments",
				position = "1");

			var n = "2";

			for (var fragmentName : list "Heading,Tabs") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}

			PageEditor.addElementToTab(
				index = "9",
				navItem = "Tab 4",
				navTab = "Widgets",
				portletName = "Asset Publisher",
				position = "5");
		}

		task ("Assert Publish custom master successfully without NPE") {
			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "This is a use case for LPS-109298. Can add elements above and below Tabs fragment to page."
	@priority = "4"
	test AddFragmentsAroundTabs {
		task ("Add a Tabs fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Add a Button fragment on the top of Tabs") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Button",
				targetFragmentName = "Tabs");
		}

		task ("Add a Heading fragment on the bottom of Tabs") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Tabs");
		}

		task ("View the order of fragments") {
			var n = "1";

			for (var fragmentName : list "Button,Tabs,Heading") {
				PageEditor.viewFragmentOrder(
					fragmentName = "${fragmentName}",
					position = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-109298. Can add Tabs fragment to container of Layout elements."
	@priority = "3"
	test AddTabsToLayoutElements {
		task ("Add a Container to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Grid below Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Add the first Tabs into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Tabs",
				navTab = "Fragments");
		}

		task ("Add the second Tabs into the first module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "1",
				fragmentName = "Tabs",
				navTab = "Fragments");
		}
	}

	@description = "This is for LPS-109298. If move the Drop Zone of master to one tab, only can add elements to that tab in content page."
	@priority = "4"
	test MoveDropZoneIntoPanel {
		property testray.main.component.name = "Master Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a Tabs fragment to custom master footer") {
			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Footer",
				fragmentName = "Tabs",
				scope = "Master");
		}

		task ("Move master page template drop zone to Tab1 of Tab Fragment") {
			PageEditor.clickConfigurableField(fragmentName = "Drop Zone");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_dragFragmentName = "Drop Zone",
				key_index = "2",
				locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
				locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
				value1 = "");
		}

		task ("Publish master") {
			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Add a page basing on custom master") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");
		}

		task ("Assert could drop fragment message appears in tab1") {
			AssertVisible(
				key_fragmentName = "tabs",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertVisible(
				key_content = "Place fragments here.",
				key_fragmentClass = "content",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");
		}

		task ("Add a card fragment to tab1") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");

			AssertElementNotPresent(
				key_index = "2",
				locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");
		}

		task ("Assert could not add fragment in Tab 2,3,4") {
			for (var navItem : list "Tab 2,Tab 3,Tab 4") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

				AssertElementNotPresent(
					key_content = "Place fragments here.",
					key_fragmentClass = "content",
					key_position = "1",
					locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");

				AssertElementNotPresent(
					key_index = "2",
					locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");
			}
		}

		task ("Assert no NPE after publishing content page") {
			PageEditor.clickPublish();

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "This is for LPS-109298. Can not add elements to each tab of Tabs fragment that is inherited from custom master in content page."
	@priority = "4"
	test ViewInheriatedTabsWithoutDropzoneInContentPage {
		property testray.main.component.name = "Master Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a Tabs fragment to custom master footer") {
			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Footer",
				fragmentName = "Tabs",
				scope = "Master");
		}

		task ("Publish master") {
			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Add a page basing on custom master") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");
		}

		task ("Assert could drop fragment message appears in tab1") {
			AssertVisible(
				key_fragmentName = "tabs",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_DROP_TARGET",
				value1 = "Place fragments here.");

			AssertElementNotPresent(
				key_content = "Place fragments here.",
				key_fragmentClass = "content",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");
		}

		task ("Assert could not add fragment in Tab 2,3,4") {
			for (var navItem : list "Tab 2,Tab 3,Tab 4") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

				AssertElementNotPresent(
					key_fragmentName = "Place fragments here.",
					locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

				AssertElementNotPresent(
					key_index = "2",
					locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");
			}
		}

		task ("Assert no NPE after publishing content page") {
			PageEditor.clickPublish();

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "This is a test for LPS-121223. View nested content when increase number of tabs."
	@priority = "4"
	test ViewNestedContentWhenIncreaseNumberOfTabs {
		task ("Add a Tabs fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Edit text in editable field of nav buttons") {
			for (var n : list "1,2,3,4") {
				PageEditor.editFragmentText(
					fragmentName = "Tabs",
					id = "title${n}",
					text = "My Tab ${n}");
			}
		}

		task ("Add fragments to drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "My Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}
		}

		task ("Increase number of tabs") {
			PageEditor.gotoConfiguration(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "6");
		}

		task ("View nested content in drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "My Tab ${n}");

				AssertElementPresent(
					key_fragmentName = "${fragmentName}",
					key_inFragmentName = "Tabs",
					locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

				var n = ${n} + 1;
			}

			var position = "1";

			for (var n : list "5,6") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "Tab ${n}");

				AssertVisible(
					key_content = "Place fragments here.",
					key_fragmentClass = "content",
					key_position = "${position}",
					locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");

				var position = ${position} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-111274. The selected Tabs fragment should always stay selected when click on the tabs of it."
	@priority = "5"
	@uitest
	test ViewTopperBarWhenSwitchToOtherTabs {
		property portal.acceptance = "true";

		task ("Add a Tabs fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("View the topper bar shown when switch to other tabs") {
			for (var navItem : list "Tab 2,Tab 3,Tab 4") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

				PageEditor.viewFragmentHeaderVisible(fragmentName = "Tabs");
			}
		}
	}

}