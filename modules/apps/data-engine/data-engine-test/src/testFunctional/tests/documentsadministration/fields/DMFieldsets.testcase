@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test FieldsetSetAsCollapsible {
		property portal.upstream = "quarantine";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "CollapsibleTest");

		DataEngine.addFields(fieldNameList = "Text,Image");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "CollapsibleTest1");

		DataEngine.addFieldsetToBuilder(fieldsetName = "CollapsibleTest");

		DataEngine.editFieldsetsCollapsible(fieldsetLabel = "CollapsibleTest");

		Click(locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_COLLAPSIBLE_UP");

		Pause(locator1 = "3000");

		Click(locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_COLLAPSIBLE_DOWN");

		DDLDataDefinition.save();

		DMDocumentType.viewCP(dmDocumentTypeName = "CollapsibleTest1");
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test FieldsetSetAsRepeatable {
		property portal.upstream = "quarantine";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "RepeatableTest");

		DataEngine.addFields(fieldNameList = "Text,Image");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "RepeatableTest1");

		DataEngine.addFieldsetToBuilder(fieldsetName = "RepeatableTest");

		DataEngine.toggleFieldRepeatable(fieldsetLabel = "RepeatableTest");

		DDLDataDefinition.save();

		DMDocumentType.viewCP(dmDocumentTypeName = "RepeatableTest1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "RepeatableTest1");

		AssertElementPresent(locator1 = "FormFields#FIELD_ADD_DUPLICATE");
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test RepeatFieldsetWithoutDuplicatingContent {
		property portal.acceptance = "false";

		var documentDescription = "Description";
		var documentType = "DM Document Type Name";
		var fieldName = "Upload";
		var documentName = "Document_1.jpg";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "${documentName}",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "${documentName}");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.addWithoutSave(
			dmDocumentTypeDescription = "${documentDescription}",
			dmDocumentTypeFieldNames = "${fieldName}",
			dmDocumentTypeName = "${documentType}");

		DataEngine.toggleFieldRepeatable(fieldFieldLabel = "${fieldName}");

		Button.clickSave();

		Navigator.gotoNavItem(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "${documentType}");

		PortletEntry.inputTitle(title = "Title");

		ItemSelector.gotoItemSelectorViaSelectButton();

		ItemSelector.selectDMImage(
			imageFileName = "${documentName}",
			navTab = "Documents and Media");

		DataEngine.addRepeatableField(fieldLabel = "${fieldName}");

		AssertTextNotPresent(
			locator1 = "FormFields#TEXT_FIELD_NULL",
			value1 = "Document_1.jpg");

		PortletEntry.publish();
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test ShowAndHideFieldsetLabel {
		property portal.upstream = "quarantine";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "ShowAndHideTest");

		DataEngine.addFields(fieldNameList = "Text,Image");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "ShowAndHideTest1");

		DataEngine.addFieldsetToBuilder(fieldsetName = "ShowAndHideTest");

		DataEngine.toggleShowLabel(fieldLabel = "Text");

		DDLDataDefinition.save();

		LexiconEntry.openEntryMenu(rowEntry = "ShowAndHideTest1");

		MenuItem.click(menuItem = "Edit");

		AssertElementNotPresent(
			key_fieldsetLabel = "ShowAndHideTest",
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		DataEngine.toggleShowLabel(hiddenFieldLabel = "Text");

		AssertElementPresent(
			key_fieldsetLabel = "ShowAndHideTest",
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		DDLDataDefinition.save();

		DMDocumentType.viewCP(dmDocumentTypeName = "ShowAndHideTest1");
	}

}