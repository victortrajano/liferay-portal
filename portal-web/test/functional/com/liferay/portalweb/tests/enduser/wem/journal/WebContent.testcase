@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-81244. The web content can be assigned to the default display page."
	@priority = "4"
	test AddWebContentAssignedToDefaultDisplayPage {
		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("Add an Asset Publisher widget to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Configure Asset Link Behavior to View in Context") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetLinkBehaviorPG(assetLinkBehavior = "View in Context");
		}

		task ("View web content should be rendered in the default display page") {
			AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC WebContent Title");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");
		}
	}

	@priority = "3"
	test AddWebContentExpirationDate {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.addExpirationDateCP(expirationDate = "01/02/3000");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewExpirationDateCP(expirationDate = "01/02/3000");
	}

	@priority = "4"
	test AddWebContentTitleEscapeCharacter {
		property testray.component.names = "Web Content Administration,XSS";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = '''<!-- -->''');

		PortletEntry.publish();

		WebContent.viewTitle(
			webContentTitle = '''<!-- -->''',
			webContentTitleEscapeCharacter = '''&lt;!-- --&gt;''');

		WebContentNavigator.gotoEditCP(
			webContentTitle = '''<!-- -->''',
			webContentTitleEscapeCharacter = '''&lt;!-- --&gt;''');

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = '''<!-- -->''',
			webContentTitleEscapeCharacter = '''&lt;!-- --&gt;''');
	}

	@description = "This is a test for LPS-125458. The web content created via Headless should be assigned to the default display page."
	@priority = "4"
	test AddWebContentViaHeadlessAssignedToDefaultDisplayPage {
		task ("Add a web content folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content based on Basic Web Content via Headless") {
			HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View the web content assigned to the default display page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");
		}
	}

	@priority = "4"
	test CannotRepublishExpiredWebContent {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireCP(webContentTitleList = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Expired",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		Button.clickPublish();

		Alert.viewRequestFailedToComplete();

		ScrollWebElementIntoView(
			key_panel = "Schedule",
			locator1 = "Panel#PANEL");

		Alert.viewExpireContentFailedMessage();
	}

	@priority = "4"
	test CompareWebContentVersionsHistory {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent New Content",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent New Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEntryMenuItem(
			entry = "WC WebContent New Title",
			menuItem = "View History");

		LexiconTable.clickEllipsisItem(
			item = "Compare to...",
			tableEntry = "WC WebContent Title");

		WebContent.viewCompareVersions(
			newContent = "WC WebContent New Content",
			version = "1.1");
	}

	@priority = "5"
	test DeleteWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "3"
	test DeleteWebContentTitleEscapeCharacter {
		property testray.component.names = "Web Content Administration,XSS";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = '''<!-- -->''');

		PortletEntry.publish();

		WebContent.viewTitle(
			webContentTitle = '''<!-- -->''',
			webContentTitleEscapeCharacter = '''&lt;!-- --&gt;''');

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentTitle = '''<!-- -->''',
			webContentTitleEscapeCharacter = '''&lt;!-- --&gt;''');
	}

	@priority = "4"
	test EditBasicWebContentStructureAndTemplate {
		property test.name.skip.portal.instance = "WebContent#EditBasicWebContentStructureAndTemplate";
		property testray.component.names = "Web Content Administration";

		SearchAdministration.executeReindex();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		NavItem.gotoStructures();

		WebContentNavigator.gotoEditStructure(structureName = "Basic Web Content");

		PortletEntry.inputName(name = "Basic Web Content Edit");

		DataEngine.addFields(fieldNameList = "Date,Image");

		WebContentStructures.saveCP(structureName = "Basic Web Content Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		NavItem.gotoTemplates();

		WebContentTemplates.modifyTemplate(
			templateDescription = "Basic Web Content Description",
			templateFieldNames = "Date,Image",
			templateName = "Basic Web Content Edit",
			templatePreviousName = "Basic Web Content");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		NavItem.gotoStructures();

		WebContentNavigator.gotoEditStructure(structureName = "Basic Web Content Edit");

		for (var structureFieldName : list "Date,Image") {
			DataEngine.viewField(
				fieldFieldLabel = "${structureFieldName}",
				fieldName = "${structureFieldName}");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.viewCP(
			structureName = "Basic Web Content Edit",
			templateDescription = "Basic Web Content Description",
			templateName = "Basic Web Content Edit",
			templateScript = "Image.getData()");
	}

	@priority = "5"
	test EditWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration,WYSIWYG";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a use case for LPS-141842. View Error message when editing web contents concurrently."
	@priority = "4"
	test EditWebContentConcurrently {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to the Edit Web Content mode in the first tab") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");
		}

		task ("Open a second tab and select it") {
			var baseURL = PropsUtil.get("portal.url");

			Open.openInTheNewTab(locator1 = "${baseURL}/group/test-site-name/~/control_panel/manage?p_p_id=com_liferay_journal_web_portlet_JournalPortlet");

			SelectWindow.selectPopUp(locator1 = "null");
		}

		task ("Edit Web Content article in the second tab") {
			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("Select the first tab and edit Web Content Title") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContent.addCP(webContentTitle = "WC WebContent Title Edit");
		}

		task ("Publish Web Content and view the error message") {
			PortletEntry.publish();

			Alert.viewErrorMessage(errorMessage = "Another user has made changes since you started editing. Publish this article to save this version and overwrite the recent changes.");
		}
	}

	@priority = "5"
	test EditWebContentViaArticleTitle {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.searchCP(webContentTitle = "WC WebContent Title");

		LexiconEntry.gotoEntry(rowEntry = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a use case for LPS-129096."
	@priority = "4"
	test EditWebContentWithUploadedFeaturedImage {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.addFeaturedImageFromComputer(uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@priority = "3"
	test ExpireEditWebContent {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireCP(webContentTitleList = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content Edit",
			webContentStatus = "Expired",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a use case for LPS-80208."
	@priority = "4"
	test ExpireLastestVersion {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC WebContent Title Edit");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@priority = "4"
	test ExpireMultipleWebContent {
		property testray.component.names = "Web Content Administration";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireCP(webContentTitleList = "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3,");

		for (var i : list "1,2,3") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title ${i}");

			WebContent.viewStatus(
				webContentContent = "WC WebContent Content",
				webContentStatus = "Expired",
				webContentTitle = "WC WebContent Title ${i}");
		}
	}

	@priority = "4"
	test ExpireWebContent {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireCP(webContentTitleList = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Expired",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This is a use case for LPS-127658 - Verified that the last portlet configuration can be restorable after deleting portlet"
	@priority = "3"
	test LastConfigurationCanBeRestorableAfterDeletingPortlet {
		Staging.openStagingAdmin(siteURLKey = "test-site-name");

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages",
			site = "Test Site Name");

		PagesAdmin.addPublicPage(
			pageName = "Web Content Display Page",
			sitePageType = "Widget Page");

		Navigator.gotoStagedSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.configureCustomBorderStylesViaLookandfeelPG(
			borderColorAttributeList = "Right-FF0D0D",
			borderStyleAttributeList = "StyleRight-Solid",
			borderWidthAttributeList = "WidthRight-100",
			borderWidthUnitList = "WidthRight-px");

		Refresh();

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.configureCustomBorderStylesViaLookandfeelPG(
			borderColorAttributeList = "Left-2BA676",
			borderStyleAttributeList = "StyleLeft-Solid",
			borderWidthAttributeList = "WidthLeft-100",
			borderWidthUnitList = "WidthLeft-px");

		Refresh();

		Portlet.deletePG(portletName = "Web Content Display");

		Staging.deleteHistory();

		Navigator.gotoStagedSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		for (var borderType : list "right,left") {
			AssertCssValue(
				locator1 = "Portlet#PORTLET_CONTENT",
				locator2 = "border-${borderType}-width",
				value1 = "100px");
		}

		for (var borderType : list "right,left") {
			AssertCssValue(
				locator1 = "Portlet#PORTLET_CONTENT",
				locator2 = "border-${borderType}-style",
				value1 = "solid");
		}

		AssertCssValue(
			locator1 = "Portlet#PORTLET_CONTENT",
			locator2 = "border-right-color",
			value1 = "rgba(255, 13, 13, 1)");

		AssertCssValue(
			locator1 = "Portlet#PORTLET_CONTENT",
			locator2 = "border-left-color",
			value1 = "rgba(43, 166, 118, 1)");
	}

	@priority = "4"
	test MoveMultipleWebContentToFolder {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Test Site Name");

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.moveMultipleToFolderCP(
			folderName = "WC Folder Name",
			rowEntryCheckList = "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			WebContent.viewTitle(webContentTitle = "${webContentTitle}");
		}
	}

	@priority = "4"
	test MoveWebContentToFolder {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Test Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");
	}

	@priority = "5"
	test MoveWebContentToFolderTraining {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		JSONWebcontent.addFolder(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name",
			groupName = "Test Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");
	}

	@description = "This is a test for LPS-86845. A user can preview a draft or pending status Web Content article through the 'View Usages' screen."
	@priority = "5"
	test PreviewDraftWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Edit the Web Content article and save it as draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				saveAsDraft = "true",
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Preview the draft article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewDraftInPage(page = "Web Content Display Page");
		}

		task ("Assert the user is taken to the Web Content Display Page and the draft version of the Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}
	}

	@description = "This is a test for LPS-86845. A user can preview a draft or pending status Web Content article through the 'View Usages' screen."
	@priority = "5"
	test PreviewPendingWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			Workflow.openWorkflowAdmin(siteURLKey = "test-site-name");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Edit the Web Content article and submit it for publication") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.addCP(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");

			Button.clickSubmitForPublication();

			Pause(locator1 = "2000");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Preview the pending article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewPendingInPage(page = "Web Content Display Page");
		}

		task ("Assert the user is taken to the Web Content Display Page and the pending version of the Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}
	}

	@description = "This is a test for LPS-90066 and LPS-127728. A user can preview a scheduled web content via View Usage. The warning message should have link in Web Content Display."
	@priority = "5"
	test PreviewScheduledWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a web content article with a future display date") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			WebContent.editDisplayDate(
				displayDate = "01/01/2100",
				displayTime = "01:01 AM");

			PortletEntry.publish();
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			IFrame.closeFrame();
		}

		task ("View the warning message shown in Web Content Display") {
			Alert.viewWarningSpecific(warningMessage = "WC WebContent Title is scheduled and will be displayed on 1/1/00 1:01 AM.");
		}

		task ("Access to web content editor via warning message link") {
			Click(
				key_warningMessage = "WC WebContent Title is scheduled and will be displayed on 1/1/00 1:01 AM.",
				locator1 = "Message#WARNING_SPECIFIC");

			WebContent.viewCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Preview the scheduled article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewScheduledInPage(page = "Web Content Display Page");
		}

		task ("Assert the user is taken to the Web Content Display Page and the scheduled Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}
	}

	@priority = "4"
	test PublishDraftWebContent {
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title",
			workflowAction = "DRAFT");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "DRAFT",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Draft",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		PortletEntry.publish(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewApprovedStatus(webContentTitle = "WC WebContent Title");
	}

	@priority = "5"
	test SearchWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.searchCP(
			webContentFolder = "Home",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.searchNoResultsCP(
			searchQuery = "WC2 WebContent2 Title2",
			webContentFolder = "Home",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This is a use case for LPS-98669. The user could select the 12th page in Link to Page field."
	@priority = "4"
	test SelectThe12thPageInLinkToPage {
		task ("Add 12 pages") {
			for (var pageName : list "P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "${pageName}");
			}
		}

		task ("Add a web content structure with a Link to Page field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Link to Page",
				fieldName = "Link to Page");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "Link to Page",
				templateName = "WC Template Name");
		}

		task ("Select the 12th page in Link to Page field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentLinkToPage = "P12",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View the P12 shown in Link to Page field") {
			WebContent.viewWithStructureCP(
				webContentLinkToPage = "P12",
				webContentTitle = "Web Content Title");
		}
	}

	@priority = "4"
	test UserEditWebContent {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Permissions,Roles,Users and Organizations,Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		JSONRole.addRegularRole(
			roleKey = "Web Content Administrator Role",
			roleTitle = "Web Content Administrator Role");

		for (var resourceActionIndex : list "ADD_STRUCTURE,ADD_FOLDER,ADD_FEED,ADD_ARTICLE,VIEW,UPDATE,SUBSCRIBE,PERMISSIONS,ADD_TEMPLATE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal",
				roleTitle = "Web Content Administrator Role");
		}

		for (var resourceActionIndex : list "ADD_DISCUSSION,VIEW,UPDATE_DISCUSSION,UPDATE,SUBSCRIBE,PERMISSIONS,EXPIRE,DELETE_DISCUSSION,DELETE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Web Content Administrator Role");
		}

		for (var resourceActionIndex : list "VIEW,UPDATE,SUBSCRIBE,PERMISSIONS,DELETE,ADD_SUBFOLDER,ADD_ARTICLE,ACCESS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal.model.JournalFolder",
				roleTitle = "Web Content Administrator Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Web Content Administrator Role");

		for (var resourceActionIndex : list "VIEW,ACCESS_IN_CONTROL_PANEL") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "Web Content Administrator Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Web Content Administrator Role",
			userEmailAddress = "userea@liferay.com");

		Site.openSiteMembershipsAdmin(siteURLKey = "test-site-name");

		Site.addAllMembersCP();

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewUserEditCP(
			userFirstLast = "userfn userln",
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a test for LPS-141766. The user could view associated display page from copy of web content."
	@priority = "4"
	test ViewAssociatedDisplayPageFromCopyOfWebContent {
		task ("Add two Public Pages and Add an Asset Publisher to each page") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");

				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					widgetName = "Asset Publisher");
			}
		}

		task ("Set Asset Publisher in the second page as the Default Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");
		}

		task ("Add the first web content and select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent 1");

			WebContent.editDisplayPage(
				pageName = "Test Page Name 2",
				pageType = "Public Pages");

			PortletEntry.publish();
		}

		task ("Copy the Web Content") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent 1",
				menuItem = "Copy");
		}

		task ("Add the second web content and select the display page template in web content") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent 2");

			WebContent.editDisplayPage(
				pageName = "Test Page Name 2",
				pageType = "Public Pages");

			PortletEntry.publish();
		}

		task ("View the friendly URL shown in address") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC WebContent 1 Duplicate 2");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/-/wc-webcontent-1-duplicate-2");
		}
	}

	@description = "This is a use case for LPS-80445. View the categorization settings after delete the category of web content."
	@priority = "5"
	test ViewCategorizationSettingsAfterDeleteCategoryOfWebContent {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Delete the vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.deleteByMenuCP(vocabularyName = "Vocabulary Name");
		}

		task ("View the categorization settings") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(locator1 = "AssetCategorization#VOCABULARY");

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@priority = "4"
	test ViewContentNotLostWithBlankTitle {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addNullCP(webContentContent = "WC WebContent Content");

		Pause(locator1 = "3000");

		SelectFrame.selectFrameNoLoading(
			key_fieldLabel = "content",
			locator1 = "CKEditor#BODY_FIELD_IFRAME_WEB_CONTENT_ARTICLE");

		AssertTextEquals(
			locator1 = "CKEditor#BODY",
			value1 = "WC WebContent Content");
	}

	@description = "This is a use case for LPS-138504. Assert display page is still selected after adding a web content without adding required category."
	@priority = "4"
	test ViewDisplayPageAfterAddingWebContentWithoutAddingRequiredCategory {
		property portal.release = "false";
		property testray.component.names = "Asset Publisher,Bookmarks";

		task ("Add a widget page and add Asset Publisher in it") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Set Asset Publisher in created page as the Default Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");
		}

		task ("Add a vocabulary for Web Content Article") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "Basic Web Content",
				assetType = "Web Content Article",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content and select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			WebContent.editDisplayPage(
				pageName = "Test Page Name",
				pageType = "Public Pages");

			Button.clickPublish();
		}

		task ("View publishing fails and no error in console") {
			AssertTextPresent(
				locator1 = "Message#ERROR",
				value1 = "Your request failed to complete.");
		}

		task ("View the selected display page is not saved") {
			WebContent.viewSelectedDisplayPageTemplateCP(
				displayPageTemplateName = "Public Pages > Test Page Name",
				displayPageTemplateType = "Specific");
		}
	}

	@priority = "3"
	test ViewDisplayStyleCP {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewDisplayStyleCP(webContentTitle = "WC WebContent Title");
	}

	@description = "This is a test for LPS-134566. View doAsUserId parameter not shown in URL field after add page link to text."
	@priority = "4"
	test ViewDoAsUserIdNotShownInURLFieldAfterAddPageLinkToText {
		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");
		}

		task ("Assign Administrator Role to the user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Assign the user the site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Impersonate the user") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.impersonateCP(userName = "userfn1");
		}

		task ("Add a Basic Web Content") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			WebContentNavigator.gotoAddCP();
		}

		task ("Add link to page and verify the URL is correct") {
			CKEditor.addTextWithLink(
				displayText = "Web Content Content",
				entryExternalURL = "/web/test-site-name/test-page-name",
				fieldLabel = "content",
				pageName = "Test Page Name");
		}
	}

	@priority = "4"
	test ViewMultipleCategoriesViaWebContent {
		property testray.component.names = "Categories,Web Content Administration";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		for (var index : list "1,2,3,4,5") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name ${index}",
				vocabularyName = "Vocabulary Name");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithMultipleCategories(
			categoryNameList = "Category Name 1,Category Name 2,Category Name 3,Category Name 4,Category Name 5",
			vocabularyName = "Vocabulary Name",
			webContentContent = "WC Content Body",
			webContentTitle = "WC Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name 1,Category Name 2,Category Name 3,Category Name 4,Category Name 5",
			webContentTitle = "WC Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Content Title");

		WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name 1,Category Name 2,Category Name 3,Category Name 4,Category Name 5");
	}

	@priority = "4"
	test ViewMultipleVocabulariesViaAddWebContent {
		property testray.component.names = "Categories,Web Content Administration";

		for (var index : list "1,2,3,4,5") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name ${index}");

			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name ${index}");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(webContentTitle = "WC Title");

		WebContent.viewCategorizationVocabularyCP(vocabularyNameList = "Vocabulary Name 1,Vocabulary Name 2,Vocabulary Name 3,Vocabulary Name 4,Vocabulary Name 5");
	}

	@description = "This is a use case for LPS-103344. View the same name categorization of web content."
	@priority = "4"
	test ViewSameNameCategoriesViaWebContent {
		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		for (var index : list "1,2") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name ${index}",
				vocabularyName = "Vocabulary Name");
		}

		var subcategoryId = JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name 1",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		var subcategoryId2 = JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name 2",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${subcategoryId},${subcategoryId2}",
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Subcategory WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Subcategory WC Title");

		WebContent.viewCategorizationCategoryCP(categoryNameList = "Subcategory Name,Subcategory Name");
	}

	@description = "This is a test for LPS-88500. At any given time, a user can view all the places a web content article is displayed through a Web Content Display widget or an Asset Publisher widget with manual selection."
	@priority = "5"
	test ViewWebContentArticleUsages {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Add a page with an Asset Publisher widget and display the Web Content article in the Asset Publisher Widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Add a page with Web Content Display and Asset Publisher widgets and display the Web Content article in both widgets") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Web Content Display and Asset Publisher Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			IFrame.closeFrame();

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Add a page with Web Content Display and Asset Publisher widgets but do not display the Web Content article in either of those widgets") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Unused Page",
				siteName = "Test Site Name");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Assert the usage on the page with the Web Content Display widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Web Content Display Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");
		}

		task ("Assert the usage on the page with the Asset Publisher widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[2]/td[1]",
				value1 = "Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert the two usages on the page with the Web Content Display and Asset Publisher widgets appear in the list") {
			AssertTextEquals(
				locator1 = "//tr[3]/td[1]",
				value1 = "Web Content Display and Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[3]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[3]/td[3]",
				value1 = "Web Content Display Widget");

			AssertTextEquals(
				locator1 = "//tr[4]/td[1]",
				value1 = "Web Content Display and Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[4]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[4]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert there is no usage on the unused page") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Unused Page')]");
		}

		task ("Remove the Web Content Display and Asset Publisher widgets from the page that has both widgets") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display and Asset Publisher Page",
				siteName = "Test Site Name");

			Portlet.deletePG(portletName = "Web Content Display");

			Portlet.deletePG(portletName = "Asset Publisher");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Assert the usage on the page with the Web Content Display widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Web Content Display Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");
		}

		task ("Assert the usage on the page with the Asset Publisher widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[2]/td[1]",
				value1 = "Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert there is no usage on the page that originally had both the Web Content Display and Asset Publisher widgets") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Web Content Display and Asset Publisher Page')]");
		}

		task ("Assert there is no usage on the unused page") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Unused Page')]");
		}
	}

	@priority = "3"
	test WebContentAdministrationPaginatingRelatedAssets {
		property testray.component.names = "Related Assets,Web Content Administration";

		for (var i : list "1,2,3,4,5,6") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent ${i} Title");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent 6 Title");

		WebContent.viewTitle(webContentTitle = "WC WebContent 3 Title");

		WebContent.paginateRelatedAssets(
			assetType = "Basic Web Content",
			itemsPerPage = "4",
			webContentTitle = "WC WebContent 3 Title");

		WebContent.viewPaginateRelatedAssets(
			itemsPerPage = "4 Entries",
			numberOfPages = "Showing 1 to 4 of 6 entries.");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent 3 Title");

		WebContent.addExistingRelatedAssetCP(
			assetTitle = "WC WebContent 5 Title",
			assetType = "Basic Web Content",
			siteName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent 3 Title");

		WebContentDisplayPortlet.configureSetupPG(metadataNameList = "Related Assets");

		WebContentDisplayPortlet.saveConfiguration();

		IFrame.closeFrame();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewRelatedAssetsPGViaWCD(relatedAssetTitle = "WC WebContent 5 Title");
	}

}