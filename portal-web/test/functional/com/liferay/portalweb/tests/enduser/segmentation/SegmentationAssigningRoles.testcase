@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Disable email verification for strangers") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editPasswordCP(
				requirePasswordReset = "true",
				userEmailAddress = "userea@liferay.com",
				userScreenName = "usersn");
		}

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Global",
				operator = "contains",
				segmentName = "Segment global usersn",
				text = "usersn");
		}

		task ("Add role and permissions") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assign the segment to the role created") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.addAssignee(
				assigneeName = "Segment global usersn",
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openSiteURL(siteName = "Test Site Name");

			Role.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-122800: Validate if, with the option Enable Assign roles by segments disabled, the option Assign Site Roles is disabled"
	@priority = "4"
	@uitest
	test AssignSiteRolesOptionInSegmentsEditor {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#AssignSiteRolesOptionInSegmentsEditor";

		task ("Add segment in Test Site Name") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment site usersn",
				text = "usersn");
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Open segment's options and assert the option Assign site roles is disabled") {
			Segmentation.openSegmentOptions(segmentName = "site");

			AssertElementPresent(
				key_text = "",
				locator1 = "Dropdown#ANY_DISABLED");
		}

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Open segment's options and assert the option Assign site roles is enabled") {
			Segmentation.openSegmentOptions(segmentName = "site");

			AssertElementPresent(
				key_text = "Assign Site Roles",
				locator1 = "Dropdown#ANY_ENABLED");
		}
	}

	@description = "LPS-121943: Validate if, with the option Enable Assign roles by segments disabled, the role is not working for the user"
	@priority = "4"
	@uitest
	test DisableAssignRolesBySegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#DisableAssignRolesBySegment";

		task ("Assert the Enable Assign roles by segments checkbox is disabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert the role is not working") {
			AssertElementNotPresent(locator1 = "ApplicationsMenu#PORTLET");
		}
	}

	@description = "LPS-122799: Validate if, with the option Enable Assign roles by segments disabled, the warning message is displayed"
	@priority = "3"
	@uitest
	test DisableAssignRolesWarningMessage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#DisableAssignRolesWarningMessage";

		task ("Assert the Enable Assign roles by segments checkbox is disabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to the role segments assignee's section") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role._goToRoleAssigneeType(
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the warning message is displayed") {
			AssertTextPresent(
				locator1 = "Segmentation#ASSIGN_SITE_ROLES_DISABLED_WARNING",
				textValue = "Assigning roles by segment is disabled",
				value1 = "Assigning roles by segment is disabled. To enable, go to System Settings > Segments > Segments Service.");
		}
	}

	@description = "LPS-121943: Validate if, with the option Enable Assign roles by segments enabled, the role is working for the user."
	@priority = "4"
	@uitest
	test EnableAssignRolesBySegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#EnableAssignRolesBySegment";

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert the role is working") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Applications");

			AssertElementPresent(
				key_category = "Content",
				key_portlet = "Content Dashboard",
				locator1 = "ApplicationsMenu#PORTLET");
		}
	}

	@description = "LPS-122799: Validate if, with the option Enable Assign roles by segments enabled, the warning message is not displayed"
	@priority = "3"
	@uitest
	test EnableAssignRolesNoWarningMessage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#EnableAssignRolesNoWarningMessage";

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to the role segments assignee's section") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role._goToRoleAssigneeType(
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the warning message is NOT displayed") {
			AssertTextNotPresent(
				locator1 = "Segmentation#ASSIGN_SITE_ROLES_DISABLED_WARNING",
				textValue = "Assigning roles by segment is disabled",
				value1 = "Assigning roles by segment is disabled. To enable, go to System Settings > Segments > Segments Service.");
		}
	}

}