definition {

	macro setColumn {
		if (!(isSet(column))) {
			var column = "1";
		}

		return "${column}";
	}

	macro setFriendlyURL {
		if (!(isSet(friendlyURL))) {
			var friendlyURL = "";
		}

		return "${friendlyURL}";
	}

	macro setGroupId {
		if (!(isSet(site))) {
			var site = "true";
		}

		var groupId = JSONGroupAPI._getGroupIdByName(
			grandParentGroupName = "${grandParentGroupName}",
			groupName = "${groupName}",
			parentGroupName = "${parentGroupName}",
			portalURL = "${portalURL}",
			site = "${site}");

		return "${groupId}";
	}

	macro setLayoutId {
		Variables.assertDefined(parameterList = "${groupId},${layoutName},${privateLayout}");

		var layoutId = JSONLayoutAPI._getLayoutIdByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "${privateLayout}");

		return "${layoutId}";
	}

	macro setParentLayoutId {
		var privateLayout = JSONLayoutSetter.setPrivateLayout(privateLayout = "${privateLayout}");

		if (isSet(parentLayoutName)) {
			Variables.assertDefined(parameterList = "${groupId},${parentLayoutName}");

			var parentLayoutId = JSONLayoutAPI._getLayoutIdByName(
				groupId = "${groupId}",
				layoutName = "${parentLayoutName}",
				privateLayout = "${privateLayout}");
		}
		else {
			var parentLayoutId = "0";
		}

		return "${parentLayoutId}";
	}

	macro setPrivateLayout {
		if (!(isSet(privateLayout))) {
			var privateLayout = "false";
		}

		return "${privateLayout}";
	}

	macro setServiceContext {
		if (!(isSet(serviceContext))) {
			var serviceContext = JSONServiceContextUtil.setServiceContext(
				addGuestPermissions = "true",
				assetCategoryIds = "${assetCategoryIds}",
				assetTagNames = "${assetTagNames}",
				workflowAction = "${workflowAction}");
		}

		return "${serviceContext}";
	}

	macro setSite {
		if (!(isSet(site))) {
			var site = "true";
		}

		return "${site}";
	}

	@summary = "Valid types declared in LayoutConstants.java. Search for 'TYPE_*'"
	macro setType {
		if (!(isSet(type))) {
			var type = "portlet";
		}

		return "${type}";
	}

	macro setTypeSettings {
		Variables.assertDefined(parameterList = "${groupId},${layoutName},${privateLayout}");

		var typeSettings = JSONLayoutAPI._getTypeSettingsByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "${privateLayout}");

		if (isSet(layoutTemplate)) {
			var typeSettings = JSONLayoutUtil._updateLayoutTemplateId(
				layoutTemplate = "${layoutTemplate}",
				typeSettings = "${typeSettings}");
		}

		if (isSet(widgetName)) {
			var typeSettings = JSONLayoutUtil._addWidgetToTypeSettings(
				column = "${column}",
				remoteAppEntryId = "${remoteAppEntryId}",
				typeSettings = "${typeSettings}",
				widgetName = "${widgetName}");
		}

		if (!(isSet(layoutTemplate)) && !(isSet(widgetName))) {
			fail("typeSettings will not be updated.");
		}

		return "${typeSettings}";
	}

}