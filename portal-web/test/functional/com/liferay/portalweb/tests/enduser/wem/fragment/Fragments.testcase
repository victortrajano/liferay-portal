@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-76817. Can namespace the CSS of a Web Fragment to avoid affecting the rest of the page."
	@priority = "3"
	test CanCheckTheNamespaceOfCSSInFragments {
		task ("Edit this  fragment with the following codes") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Fragment Name",
				item = "Edit");

			var htmlSnippet = '''
<div class="test">
CSS
</div>
<div>
NO CSS
</div>
		''';

			var cssSnippet = '''
.test
{ font-size: 40px; }
		''';

			FragmentsEditor.typeHtmlEditor(content = "${htmlSnippet}");

			FragmentsEditor.typeCssEditor(content = "${cssSnippet}");

			FragmentsEditor.waitForAutoSave();
		}

		task ("Assert CSS only applies to CSS and not NO CSS in Fragment preview") {
			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='test']",
				text = "CSS");

			FragmentsEditor.assertFragmentPreview(fragmentLocator = "//div[@class='test']/parent::div/following-sibling::style");
		}

		task ("Assert Success Message") {
			PortletEntry.publish();
		}
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments when create them in portal and they are non-Cachable by default."
	@priority = "5"
	@uitest
	test MarkFragmentCreatedInPortalAsCacheable {
		property portal.acceptance = "true";

		task ("Add a new fragment") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Fragment Name",
				item = "Edit");
		}

		task ("Mark the fragment as cacheable") {
			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Cacheable",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Check.checkNotVisible(
				checkboxName = "Cacheable",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PortletEntry.publish();
		}
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments without Read-Only label imported to portal and they are non-Cachable by default."
	@priority = "4"
	test MarkFragmentWithoutReadOnlyImportedToPortalAsCacheable {
		task ("Import a fragment collection without Read-Only") {
			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Edit the imported fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Content",
				item = "Edit");
		}

		task ("Mark the fragment as cacheable") {
			AssertElementNotPresent(locator1 = "FragmentEditor#READ_ONLY_VIEW");

			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Cacheable",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Check.checkNotVisible(
				checkboxName = "Cacheable",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PortletEntry.publish();
		}
	}

	@description = "This is a test for LPS-111657. Can save Container and nested elements as a new composition when the Container is inside a column of Row."
	@priority = "5"
	@uitest
	test SaveContainerAsCompositionInModuleOfGrid {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Add a Grid to page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Container to the first module of grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Container",
				navTab = "Fragments");
		}

		task ("Add an Image to the Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Image",
				navTab = "Fragments");
		}

		task ("Add an Asset Publisher below Image inside the Container") {
			PageEditor.gotoTab(tabName = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = "Asset Publisher");

			DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
				key_portletName = "Asset Publisher",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Image')]//following-sibling::div[contains(@class,'page-editor__topper__content')]",
				value1 = "Asset Publisher");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.waitForAutoSave();

			PageEditor.gotoTab(tabName = "Browser");

			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("Assert save Container and nested elements as composition") {
			PageEditor.gotoSaveAsFragment(fragmentName = "Container");

			PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");
		}

		task ("Add new composition to below Grid to page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				composition = "true",
				fragmentName = "New Fragment Name",
				targetFragmentName = "Grid");

			for (var elementName : list "Image,Asset Publisher") {
				AssertElementPresent(
					key_elementHeader = "//li[contains(@class,'topper__title') and contains(.,'${elementName}')]",
					key_position = "2",
					locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
			}
		}
	}

}