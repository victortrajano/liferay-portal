@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Roles";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();

			Site.tearDownCP();

			PortalSettings.tearDownCP();
		}
	}

	@description = "Assert could add site with Add Site	regular role and could not after removing."
	@priority = "4"
	test AddSiteRegRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a regular role and define permissions to access site admin") {
			Permissions.setUpRegRoleLoginUserCP(
				roleTitle = "Regrole Name",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_site_admin_web_portlet_SiteAdminPortlet",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_roles_admin_web_portlet_RolesAdminPortlet",
				roleTitle = "Regrole Name");
		}

		task ("Login as the user with created role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert can not add site") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}

		task ("Add add site permisssion to the role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = "90",
				roleTitle = "Regrole Name");
		}

		task ("Assert can add site") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addBlankCP(siteName = "Site Name");
		}

		task ("Remove add site permisssion to the role") {
			Permissions.removePermissionViaAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = "90",
				roleTitle = "Regrole Name");
		}

		task ("Assert can not add site with user without add site permission") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Assert could find site by site name and view Site Administrator role permissions."
	@priority = "5"
	test SearchParenetAndChildSiteAndViewPermissions {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a regular role and define permission to access in control panel") {
			JSONRole.addRegularRole(roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Roles Regrole Name");
		}

		task ("Add a user and assign role to the user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a site and child site") {
			JSONGroup.addGroup(groupName = "Parent Site Name");

			JSONGroup.addChildGroup(
				groupName = "Child SiteName",
				parentGroupName = "Parent Site Name");
		}

		task ("Assign user to parent site") {
			JSONGroup.assignUserToGroup(
				groupName = "Parent Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign site administor role to user") {
			JSONGroup.assignGroupRoleToUser(
				groupName = "Parent Site Name",
				roleTitle = "Site Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign user to child site") {
			JSONGroup.assignUserToGroup(
				groupName = "Child SiteName",
				parentGroupName = "Parent Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign site administor role to user") {
			JSONGroup.assignGroupRoleToUser(
				groupName = "Child SiteName",
				parentGroupName = "Parent Site Name",
				roleTitle = "Site Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Search parent site name") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Search.searchCP(searchTerm = "Parent");
		}

		task ("Assert can find parent site but can't find child site") {
			var key_siteName = "Parent Site Name";

			AssertTextEquals.assertPartialText(
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Parent Site Name");

			AssertTextNotPresent(value1 = "Child SiteName");
		}

		task ("Search child site name") {
			Search.searchCP(searchTerm = "Child");
		}

		task ("Assert can find child site but can't find parent site") {
			var key_siteName = "Child SiteName";

			AssertTextEquals.assertPartialText(
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Child SiteName");

			AssertTextNotPresent(value1 = "Parent Site Name");
		}

		task ("Only search "Site" ") {
			Search.searchCP(searchTerm = "Site");
		}

		task ("Assert can find child site and parent site") {
			var key_siteName = "Parent Site Name";

			AssertTextEquals.assertPartialText(
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Parent Site Name");

			var key_siteName = "Child SiteName";

			AssertTextEquals.assertPartialText(
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Child SiteName");
		}

		task ("View the user has site admin permissions in  parent site and child site") {
			Site.viewSiteAdminPermissionsCP(siteName = "Parent Site Name");

			Site.viewSiteAdminPermissionsCP(siteName = "Child SiteName");
		}
	}

	@description = "Assert could manage child site with Manage Subsites	site role and could not after removing."
	@priority = "4"
	test ViewSiteManageChildSiteSiteRole {
		task ("Log out and log in user with assigned site role and created site and page") {
			Permissions.setUpSiteRoleLoginUserCP(
				pageName = "Site Page",
				portletName = "Sites",
				roleTitle = "Siterole Name",
				roleType = "Site",
				siteName = "Site Name",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test",
				userScreenName = "usersn");
		}

		task ("Add a child site and assign the user to it") {
			JSONGroup.addChildGroup(
				groupName = "Child SiteName1",
				parentGroupName = "Site Name");

			JSONGroup.assignUserToGroup(
				groupName = "Child SiteName1",
				parentGroupName = "Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a regular role and assign it to the user") {
			JSONRole.addRegularRole(roleTitle = "Regrole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Give permissions to regular role to add site in site admin") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = "90",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_site_admin_web_portlet_SiteAdminPortlet",
				roleTitle = "Regrole Name");
		}

		task ("Give permissions to site role to add and update site") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Siterole Name",
				roleType = "site");
		}

		task ("Logout and login as the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to add a child site to the Site Name site") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_siteName = "Site Name";

			Click.waitForMenuToggleJSClick(locator1 = "Sites#SITE_TABLE_ACTIONS");

			MenuItem.click(menuItem = "Add Child Site");

			LexiconEntry.gotoEntry(rowEntry = "Blank Site");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Child SiteName2");

			Button.clickAdd();

			SelectFrameTop();

			Alert.viewSuccessMessage();
		}

		task ("Go to add a child site to the Child SiteName1 site") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_siteName = "Child SiteName1";

			Click.waitForMenuToggleJSClick(locator1 = "Sites#SITE_TABLE_ACTIONS");
		}

		task ("Assert could not add child site and delete Child SiteName1 site") {
			MenuItem.viewNotPresent(menuItem = "Add Child Site");

			MenuItem.viewNotPresent(menuItem = "Delete");
		}

		task ("View Child SiteName2 site") {
			var key_site = "Child SiteName2";

			AssertClick.assertPartialTextClickAt(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "Child SiteName2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "Child SiteName2");
		}

		task ("Give permissions to site role to manage child site") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SUBGROUPS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Siterole Name",
				roleType = "site");
		}

		task ("Go to view Child SiteName1 and Child SiteName2 site as userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_site = "Child SiteName1";

			AssertClick.assertPartialTextClickAt(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "Child SiteName1");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "Child SiteName1");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_site = "Child SiteName2";

			AssertClick.assertPartialTextClickAt(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "Child SiteName2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "Child SiteName2");
		}

		task ("Remove permissions to site role to manage child site") {
			Permissions.removePermissionViaAPI(
				resourceAction = "MANAGE_SUBGROUPS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Siterole Name",
				roleType = "site");
		}

		task ("view could not add child site and delete siteto Child SiteName1 as userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_siteName = "Child SiteName1";

			Click.waitForMenuToggleJSClick(locator1 = "Sites#SITE_TABLE_ACTIONS");

			MenuItem.viewNotPresent(menuItem = "Add Child Site");

			MenuItem.viewNotPresent(menuItem = "Delete");
		}

		task ("View Child SiteName2 site") {
			var key_site = "Child SiteName2";

			AssertClick.assertPartialTextClickAt(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "Child SiteName2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "Child SiteName2");
		}
	}

	@description = "Assert could manage pages with Manage Pages	regular role and could not after removing."
	@priority = "4"
	test ViewSiteManagePagesRegRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "CPRolesCPSites#ViewSiteManagePagesRegRole";

		task ("Get site name") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");
		}

		task ("Log out and log in user with assigned regular role") {
			Permissions.setUpRegRoleLoginUserCP(
				roleTitle = "Regrole Name",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Add a site and add a public widget page in it") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page");
		}

		task ("Give permissions to regular role to go to view site admin") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_site_admin_web_portlet_SiteAdminPortlet",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Regrole Name");
		}

		task ("Assert could not view site as userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}

		task ("Give permissions to regular role to go to view site and manage page") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_LAYOUTS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Regrole Name");
		}

		task ("Assert could view site and manage page as userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_site = "${siteName}";

			AssertTextEquals.assertPartialText(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "${siteName}");

			PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			var key_site = "Site Name";

			AssertTextEquals.assertPartialText(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = "Site Name");
		}

		task ("Remove permissions of regular role to go to view site and manage page") {
			Permissions.removePermissionViaAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Regrole Name");

			Permissions.removePermissionViaAPI(
				resourceAction = "MANAGE_LAYOUTS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Regrole Name");
		}

		task ("Assert could not view site as userea") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}
	}

}