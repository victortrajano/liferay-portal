@component-name = "portal-collaboration"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Wiki";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WikiNode.tearDownCP();

			WikiPage.tearDownCP();
		}
	}

	@description = "This test covers LPS-89884. It ensures that a DL image can be added to a wiki page via URL."
	@priority = "5"
	@refactordone
	test CanAddDMImageToWikiPageViaURL {
		property test.name.skip.portal.instance = "CPWiki#CanAddDMImageToWikiPageViaURL";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		WikiPage.addCP(
			contentImageName = "Document_2.jpg",
			groupName = "Guest",
			imageSourceURL = "http://localhost:8080/webdav/guest/document_library/Document_2.jpg",
			siteURLKey = "guest",
			wikiAdmin = "true",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page Title");

		WikiPage.viewCP(
			contentImageName = "Document_2.jpg",
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");
	}

	@description = "This ensures that a wiki node can be added."
	@priority = "4"
	@refactordone
	@uitest
	test CanAddNode {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.addCP(wikiNodeName = "Wiki Node Name");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.viewCP(
			numberOfWikiPages = "0",
			wikiNodeName = "Wiki Node Name");
	}

	@description = "This ensures that a wiki page can be added to a wiki node."
	@priority = "5"
	@refactordone
	@uitest
	test CanAddPageToNode {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.viewCP(
			numberOfWikiPages = "2",
			wikiNodeName = "Main");

		WikiNavigator.gotoCP(wikiPageTitle = "Wiki Page Title");

		WikiPage.viewCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");
	}

	@description = "This ensures that the wiki page versions can be compared."
	@priority = "4"
	@refactordone
	test CanComparePageVersions {
		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page Title");

		WikiPage.editPageCP(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageContentEdit = "Wiki Page Content Edit",
			wikiPageTitle = "Wiki Page Title");

		WikiPage.compareVersionsCP(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page Title",
			wikiPageVersionDiff = "Edit",
			wikiPageVersionNew = "1.1",
			wikiPageVersionOld = "1.0");
	}

	@description = "This ensures that the front page can be removed."
	@priority = "5"
	@refactordone
	test CanDeleteFrontPage {
		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.addFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiNodeName = "Main");

		PortletEntry.publish();

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		WikiPage.moveToRecycleBinCP(wikiPageTitle = "FrontPage");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.deleteCP(
			assetName = "FrontPage",
			assetType = "Wiki Page");

		RecycleBin.viewDefaultCP(assetName = "FrontPage");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.viewFrontPageDefaultCP(wikiPageTitle = "FrontPage");
	}

	@description = "This ensures that the wiki node can be deleted."
	@priority = "5"
	@refactordone
	test CanDeleteNode {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		JSONWiki.addWikiNode(
			groupName = "Guest",
			wikiNodeDescription = "Wiki Node Description",
			wikiNodeName = "Wiki Node Name");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.deleteCP(wikiNodeName = "Wiki Node Name");

		WikiNode.viewNoCP(wikiNodeName = "Wiki Node Name");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.viewCP(
			assetName = "Wiki Node Name",
			assetType = "Wiki Node",
			deleteUser = "Test Test");

		RecycleBin.deleteCP(
			assetName = "Wiki Node Name",
			assetType = "Wiki Node");

		RecycleBin.viewDefaultCP(assetName = "Wiki Node Name");
	}

	@description = "This ensures that the default front page can be edited."
	@priority = "5"
	@refactordone
	test CanEditFrontPage {
		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.addFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiNodeName = "Main");

		PortletEntry.publish();

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.viewFrontPageCP(
			portletName = "Wiki",
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiNodeName = "Main");
	}

	@description = "This ensures that the wiki node can be edited."
	@priority = "5"
	@refactordone
	test CanEditNode {
		JSONWiki.addWikiNode(
			groupName = "Guest",
			wikiNodeDescription = "Wiki Node Description",
			wikiNodeName = "Wiki Node Name");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.editCP(
			wikiNodeDescription = "Wiki Node Description",
			wikiNodeDescriptionEdit = "Wiki Node Description Edit",
			wikiNodeName = "Wiki Node Name",
			wikiNodeNameEdit = "Wiki Node Name Edit");

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNode.viewCP(
			numberOfWikiPages = "1",
			wikiNodeName = "Wiki Node Name Edit");
	}

	@description = "This ensures that a wiki page can be moved to a new parent page."
	@priority = "5"
	@refactordone
	test CanMovePageToNewParentPage {
		for (var num : list "1,2") {
			JSONWiki.addWikiPage(
				groupName = "Guest",
				wikiNodeName = "Main",
				wikiPageContent = "Wiki Page Content ${num}",
				wikiPageName = "Wiki Page Title ${num}");
		}

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		WikiPage.changeParentWikipageCP(
			newParentWikiPageTitle = "Wiki Page Title 1",
			wikiPageTitle = "Wiki Page Title 2");

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		for (var num : list "1,2") {
			WikiTable.viewEntry(
				entryStatus = "APPROVED",
				wikiPageTitle = "Wiki Page Title ${num}");
		}

		WikiPage.viewChildPageCP(
			wikiChildPageContent = "Wiki Page Content 2",
			wikiChildPageTitle = "Wiki Page Title 2",
			wikiPageContent = "Wiki Page Content 1",
			wikiPageTitle = "Wiki Page Title 1");
	}

	@description = "This ensures that the imported pages can be viewed."
	@priority = "5"
	@refactordone
	test CanViewImportedPages {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Wiki");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Wiki",
			widgetName = "Wiki");

		WikiNavigator.openWikiAdmin(siteURLKey = "site-name");

		LAR.importPortlet(
			initializeLiferayEvent = "true",
			larFileName = "space-history-wiki.lar",
			uploadFrom = "dependencies");

		Navigator.gotoSitePage(
			pageName = "Wiki",
			siteName = "Site Name");

		WikiNavigator.gotoPG(wikiPageTitle = "FrontPage");

		WikiPage.viewFrontPagePG(wikiPageContent = "Located in Provincetown, MA, S.P.A.C.E. (Space Program Academy of Continuing Education) was founded in February of 2063 by its current Board of Governors members—Dr. Edith Adams, Dr. Harold Vance, Antony Carelli, and Victoria Allen—as a fully-accredited, internationally-run school for students interested in pursuing a wide range of space-related careers. S.P.A.C.E. also serves as a research center for faculty. S.P.A.C.E.'s foundation came about largely as a result of skyrocketing interest in space-related careers and the limitations on The Space Program.");

		for (var wikiPageTitle : list "FrontPage,Board of Governors,Board of Governors,The Space Program,Antony Carelli,Dr. Harold Vance,Victoria Allen,Dr. Asmund Grey") {
			WikiNavigator.gotoAllPagesPG();

			WikiNavigator.gotoPG(wikiPageTitle = "${wikiPageTitle}");
		}

		WikiPage.viewPG(
			wikiPageContent = "Dr. Asmund Grey, first and current president of S.P.A.C.E., was born Asmund Andrew Grey March 22, 2029 to Drs. Albert and Anita Grey in Stratford-upon-Avon, England.",
			wikiPageTitle = "Dr. Asmund Grey");
	}

	@description = "This ensures that the wiki page RSS can be viewed."
	@ignore = "true"
	@priority = "4"
	@refactordone
	test CanViewPageRSS {

		// This test will re-work after POSHI-6

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page RSS");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page RSS");

		WikiPage.viewRSS(
			site = "Guest",
			version = "1.0",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page RSS");
	}

	@description = "This ensures that the deleted front page can be restored."
	@priority = "5"
	@refactordone
	test CanViewRestoredFrontPage {
		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		JSONWiki.updateWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content",
			wikiPageName = "FrontPage");

		JSONWiki.movePageToTrash(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageName = "FrontPage");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.viewFrontPageDefaultCP(wikiPageTitle = "FrontPage");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.viewCP(
			assetName = "FrontPage",
			assetType = "Wiki Page",
			deleteUser = "Test Test");

		RecycleBin.restoreOverwriteCP(assetName = "FrontPage");

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "FrontPage");

		WikiPage.viewFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiFrontPageTitle = "FrontPage",
			wikiNodeName = "Main");
	}

	@description = "This ensures that the restored and rename wiki page can be viewed."
	@priority = "5"
	@refactordone
	test CanViewRestoredWikiPage {
		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page Title1");

		JSONWiki.movePageToTrash(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageName = "Wiki Page Title1");

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "Wiki Page Content",
			wikiPageName = "Wiki Page Title1");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.viewCP(
			assetName = "Wiki Page Title1",
			assetType = "Wiki Page",
			deleteUser = "Test Test");

		RecycleBin.restoreRenameCP(
			assetName = "Wiki Page Title1",
			newName = "Wiki Page Title2");

		WikiNavigator.openToWikiNode(
			groupName = "Guest",
			siteURLKey = "guest",
			wikiNodeName = "Main");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		for (var num : list "1,2") {
			WikiTable.viewEntry(
				entryStatus = "APPROVED",
				wikiPageTitle = "Wiki Page Title${num}");
		}

		WikiNavigator.openToWikiPage(
			siteURLKey = "guest",
			wikiNodeName = "Main",
			wikiPageTitle = "Wiki Page Title2");

		WikiPage.viewCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title2");
	}

}