@component-name = "portal-collaboration"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Sharing";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test asserts that a user can change the view permission to the comment permission via the manage collaborators."
	@priority = "5"
	@refactordone
	test CanChangePermissionToCommentViaManageCollaborators {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocumentSharing.changePermission(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			selectPermission = "Can Comment",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "Comment",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test asserts that a user can change the view permission to the update permission via the manage collaborators"
	@priority = "5"
	@refactordone
	test CanChangePermissionToUpdateViaManageCollaborators {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocumentSharing.changePermission(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			selectPermission = "Can Update",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "Update",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test covers LPS-94284 and LPS-105038. It ensures that the invalid email cannot be added if it has space, also covers the input field that still contains the invalid email after pressing enter."
	@priority = "4"
	@refactordone
	test CannotShareWithInvalidAddress {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title 1",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title 1");

		IFrame.selectModalFrame();

		Type.sendKeys(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "userea2@liferay.com ");

		KeyPress(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "\RETURN");

		AssertElementPresent(
			key_userEmailAddress = "userea2@liferay.com",
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_FEEDBACK_ITEM");

		AssertElementNotPresent(
			key_userName = "userea2@liferay.com",
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_TAG");

		Type(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "userea3@liferay.com");

		KeyPress(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "\RETURN");

		AssertTextEquals(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "userea3@liferay.com");
	}

	@description = "This test share an content to a user and disable the sharing option. This test asserts that a collaborator without sharing permissions will not be able to share this content."
	@priority = "5"
	@refactordone
	test CannotShareWithoutPermissions {
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea1@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Asset.openTosharedContent(
			navTab = "Shared with Me",
			siteURLKey = "guest");

		LexiconEntry.viewNoEntryMenuItem(
			menuItem = "Share",
			rowEntry = "DM Document Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.viewNoEntryMenuItem(
			menuItem = "Share",
			rowEntry = "DM Document Title");
	}

	@description = "This test covers LPS-101927. It ensures that a user can reply to a comment on an image via shared content"
	@priority = "4"
	@refactordone
	test CanReplyToCommentViaSharedContent {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			sharingPermissions = "Comment",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			sharingPermissions = "Comment",
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		Comments.addPG(entryComment = "This is a comment");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "This is a comment",
			userFullName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		Comments.replyToComment(commentReply = "This is a reply comment");

		Comments.viewPG(
			commentCount = "2",
			entryComment = "This is a reply comment",
			userFullName = "userfn2 userln2");
	}

	@description = "This test covers LPS-94585. It ensures that users can share via Shared Content app."
	@priority = "5"
	@refactordone
	test CanShareViaSharedContent {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			shareable = "true",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Asset.openTosharedContent(
			navTab = "Shared with Me",
			siteURLKey = "guest");

		DMNavigator.gotoShareViaSharedContent(dmDocumentTitle = "DM Document Title");

		DMDocument.shareWithNoSharingPermissionsUser(userEmailAddress = "userea2@liferay.com");

		AssertConsoleTextNotPresent(value1 = "ArrayIndexOutOfBoundsException");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		JSONDocument.moveToRecycleBin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Asset.openTosharedContent(
			navTab = "Shared with Me",
			siteURLKey = "guest");

		LexiconEntry.viewNoEntryMenu(rowEntry = "DM Document Title");
	}

	@description = "This test covers LPS-94294. This test asserts that a user can comment on a document it is shared with him"
	@priority = "4"
	@refactordone
	test CanShareWithCommentPermissions {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			sharingPermissions = "Comment",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DMDocumentSharing.viewSharedFlag(
			detailsView = "true",
			dmDocumentTitle = "DM Document Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "Comment",
			dmDocumentTitle = "DM Document Title");

		Comments.addPG(entryComment = "test");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "test",
			userFullName = "userfn userln");
	}

	@description = "This test covers LPS-94661. It ensures that the user can share a document with an apostrophe in the title."
	@priority = "3"
	@refactordone
	test CanShareWithSpecialCharacter {
		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = '''DM Document's Title''',
			viewableBy = "Owner");

		Button.clickPublish();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Share",
			rowEntry = "DM Document");

		DMDocument.sharePG(
			noAutocomplete = "true",
			sharingPermissions = "Comment",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = '''DM Document's Title''',
			ownerName = "Test Test",
			specialCharacter = "true");
	}

	@description = "This test asserts that a user can update a document once it is shared with him, also covers LPS-94448 and LPS-94294"
	@priority = "4"
	@refactordone
	test CanShareWithUpdatePermissions {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			sharingPermissions = "Update",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocumentSharing.viewSharedFlag(
			detailsView = "true",
			dmDocumentTitle = "DM Document Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		NotificationsPortlet.configureNotificationPG(menuItem = "Edit");

		DMDocument.editCmd(dmDocumentTitleEdit = "DM Document Title Edit");

		Button.clickPublish();

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "Update",
			dmDocumentTitle = "DM Document Title Edit");
	}

	@description = "This test asserts that a user can only view a document once it is shared with him"
	@priority = "4"
	@refactordone
	test CanShareWithViewPermissions {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			noAutocomplete = "true",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "Cards");

		DMDocumentSharing.viewSharedFlag(
			detailsView = "true",
			dmDocumentTitle = "DM Document Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "View",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test makes sure all collaborators will view all collaborators of the document that was shared to him. This usecase also tests that a user can successfully remove collaborators through Manage Collaborators and asserts that empty message displays when all collaborators are removed."
	@priority = "5"
	@refactordone
	test CanViewAndRemoveCollaborators {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			noAutocomplete = "true",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title");

		DMDocumentSharing.viewCollaborators(collaboratorList = "userfn,userfn2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentUploader = "Test Test");

		DMDocumentSharing.viewCollaborators(collaboratorList = "userfn,userfn2");

		AssertElementNotPresent(
			key_text = "Manage Collaborators",
			locator1 = "Button#ANY");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentUploader = "Test Test");

		DMDocumentSharing.removeCollaborator(
			collaboratorList = "userfn,userfn2",
			emptyStateMessage = "true");
	}

	@description = "This test covers LPS-94858. It asserts deleted entry displays in a user's Shared Content using share button from info panel."
	@priority = "4"
	@refactordone
	test CanViewDeletedEntryInSharedContent {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShareInfoPanel(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		JSONDocument.moveToRecycleBin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		AssertTextEquals(
			locator1 = "Sharing#NOTIFICATIONS_DELETE_ENTRY_TITLE",
			value1 = "Notification no longer applies.");

		AssertTextEquals(
			locator1 = "Sharing#NOTIFICATIONS_DELETE_ENTRY_CONTENT",
			value1 = "Notification for Sharing was deleted.");

		Asset.openTosharedContent(
			navTab = "Shared with Me",
			siteURLKey = "guest");

		AssertElementPresent(
			key_status = "Not Visible",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_STATUS");

		AssertElementNotPresent(
			key_contentTitle = "DM Document Title",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_OPTIONS");

		AssertElementNotPresent(
			key_contentTitle = "DM Document Title",
			locator1 = "Sharing#SHARED_CONTENT_CONTENT_TITLE");
	}

	@description = "This test ensures that users receives an email when a document is shared with them. This email contains a link that navigates user to Shared Content app."
	@priority = "4"
	@refactordone
	test CanViewSharedContentViaEmail {
		property custom.properties = "message.boards.message.formats.default=html${line.separator}pop.server.notifications.enabled=true${line.separator}pop.server.subdomain=${line.separator}mail.session.mail.smtp.auth=true${line.separator}mail.session.mail.store.protocol=pop3${line.separator}mail.session.mail.transport.protocol=smtp";
		property test.name.skip.portal.instance = "DMSharing#CanViewSharedContentViaEmail";

		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Gmail.login(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userPassword = PropsUtil.get("email.password.4"));

		Gmail.gotoHtmlMode();

		Gmail.deleteSpecificMail(gmailMessageTitleList = "Test Test has shared DM Document Title with you for viewing.,Your New Account,Your New Password");

		Navigator.openSpecificURL(url = "${portalURL}");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.configureMailServerSettings(
			needsReply = "true",
			userName = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"));

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.editCP(
			mailDomain = "gmail.com",
			virtualHost = "localhost");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		JSONUser.addUser(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userScreenName = "usersn1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = PropsUtil.get("email.address.4"),
			userName = "userfn1 userln1");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = PropsUtil.get("email.address.4"));

		Pause(locator1 = "30000");

		Gmail.gotoHtmlMode();

		Gmail.viewMail(
			emailFromUserName = "Joe Bloggs",
			gmailAssetType = "DM Document Title",
			gmailMessageBody = "Test Test has shared DM Document Title with you for viewing.",
			gmailMessageTitle = "Test Test has shared DM Document Title with you for viewing.");

		AssertClick(
			locator1 = "Sharing#EMAIL_VIEW_DOCUMENT_BUTTON",
			value1 = "View Document");

		SelectWindow.selectPopUp(locator1 = "null");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "View",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test asserts only one entry displays in a user's Shared Content app when multiple users share the same document to him."
	@priority = "4"
	@refactordone
	test CanViewSingleEntryAfterMultipleSharing {
		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea2@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoShare(dmDocumentTitle = "DM Document Title");

		DMDocument.sharePG(
			userEmailAddress = "userea2@liferay.com",
			userName = "userfn2 userln2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "Test Test");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "DM Document Title",
			openNotification = "true",
			ownerName = "userfn userln");

		Asset.openTosharedContent(
			navTab = "Shared with Me",
			siteURLKey = "guest");

		DMDocumentSharing.viewSharedFlag(dmDocumentTitle = "DM Document Title");

		DMDocumentSharing.viewNoDuplicateDocument(dmDocumentTitle = "DM Document Title");
	}

}