@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to define a fixed filters with Boolean type for table view on the Display Page"
	@priority = "4"
	test CanDefineFixedFilterForBooleanType {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field",
			fieldType = "Boolean");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject",
			value = "true");

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject",
			value = "false");

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject",
			value = "false");

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		VisualizeObjectCollectionDisplay.addFieldForCollectionDisplay(fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.addFieldInsideCollectionDisplay(
			fragmentName = "Heading",
			label = "Expand Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			listStyle = "Table",
			selectedName = "Custom Objects");

		PageEditor.filterCollection(
			fieldLabel = "Field",
			option = "True");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		PageEditor.assertTrueEntryIsPresent();

		PageEditor.assertFalseEntryIsNotPresent();
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to define a fixed filters with Picklist type for table view on the Display Page"
	@priority = "4"
	test CanDefineFixedFilterForPicklistType {
		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

		for (var itemsName : list "1,2") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "${itemsName}",
				itemName = "Item Test ${itemsName}",
				picklistName = "Custom Picklist");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var entryName : list "1,2") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Item Test ${entryName}");
		}

		Navigator.openURL();

		ContentPages.addPage(pageName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			listStyle = "Table",
			selectedName = "Custom Objects");

		PageEditor.gotoEllipsisMenuItemInItemSelector(
			fieldLabel = "Collection",
			menuItem = "Filter Collection");

		VisualizeObjectDisplayPage.selectFilterCollection(
			fieldLabel = "Field Picklist",
			itemName = "Item Test 1");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Blank Display Page");

		VisualizeObjectCollectionDisplay.assertTableEntriesPresent(entries = "Item Test 1");

		VisualizeObjectCollectionDisplay.assertTableEntriesNotPresent(entries = "Item Test 2");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to set the pagination as Numeric"
	@priority = "4"
	test CanSetPaginationNumeric {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 2");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 3");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		VisualizeObjectCollectionDisplay.addFieldForCollectionDisplay(fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.addFieldInsideCollectionDisplay(
			fragmentName = "Heading",
			label = "Expand Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			pagination = "Numeric",
			selectedName = "Custom Objects");

		PageEditor.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Guest");

		PageEditor.assertPaginationNumericTypeIsDisplayed(pageNumberList = "1");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to set the pagination as Simple"
	@priority = "4"
	test CanSetPaginationSimple {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 2");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text 3");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		VisualizeObjectCollectionDisplay.addFieldForCollectionDisplay(fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.addFieldInsideCollectionDisplay(
			fragmentName = "Heading",
			label = "Expand Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			pagination = "Simple",
			selectedName = "Custom Objects");

		PageEditor.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Guest");

		PageEditor.assertPaginationSimpleTypeIsDisplayed();
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Big Decimal type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryBigDecimal {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123.123456");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "BigDecimal");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123.123456");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123.123456");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Boolean type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryBoolean {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "true");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Boolean");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "true");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "true");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Date type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryDate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "2021-01-01");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Date");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "1/1/21");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "1/1/21");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Double type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryDouble {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "1.54");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Double");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "1.54");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "1.54");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Integer type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryInteger {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123456789");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Integer");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123456789");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123456789");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of Long type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryLong {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123456789123456789");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Long");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123456789123456789");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "123456789123456789");
	}

	@description = "LPS-133867|LPS-135004 - Verify it is possible to display a specific entry of String type for a specific Object"
	@priority = "5"
	test DisplaySpecificEntryString {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "String",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test text");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "String");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test text");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test text");
	}

	@description = "LPS-137104 - Verify if Objects and its data are displayed as a Content Type and Subtype for a Page Template"
	@priority = "5"
	test ObjectDisplayedForPageTemplate {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		VisualizeObjectDisplayPage.openPageTemplate();

		Click(locator1 = "VisualizeObjectDisplayPage#SELECT_BLANK_OBJECT_DISPLAY_PAGE_TEMPLATE");

		Type(
			locator1 = "VisualizeObjectDisplayPage#NAME_OBJECT_DISPLAY_PAGE_TEMPLATE",
			value1 = "Object Display Page Template");

		Select(
			locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE",
			value1 = "Custom Object");

		VisualizeObjectDisplayPage.validateObjectContentType(contentType = "Custom Object");
	}

	@description = "LPS-137105 - Verify if the Object entries are rendered when previewing it"
	@priority = "5"
	test ObjectEntriesAreRendered {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field",
			fieldType = "String");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test Entry");

		Navigator.openURL();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "guest");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Custom Object",
			displayPageName = "Blank Display Page",
			subtype = "Custom Object");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Field");

		PageEditor.selectItemToPreviewWithObject(objectLabel = "Custom Object");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test Entry");
	}

	@description = "LPS-137106 - Verify if it is possible to link a Mapped URL with the Objects Page Template"
	@priority = "5"
	test ObjectMappedURL {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry 1");

		VisualizeObjectDisplayPage.createObjectPageTemplate(
			contentType = "Custom Object",
			pageTemplateName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Blank Display Page");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects");

		Refresh();

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Basic Components",
			entryTitle = "",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		Navigator.gotoNavTab(navTab = "Link");

		Select(
			key_fieldLabel = "Link",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Mapped URL");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Display Page URL");

		PageEditor.clickPublish();

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Test Content Page Name");

		Click(
			key_entry = "Entry 1",
			locator1 = "VisualizeObjectDisplayPage#DISPLAY_ENTRY");

		AssertElementPresent(
			key_entry = "Entry 1",
			locator1 = "VisualizeObjectDisplayPage#DISPLAY_ENTRY");
	}

	@description = "LPS-133867|LPS-135004 - Verify if it's possible map and view the image of user Profile in a Fragment of Display Page"
	@priority = "4"
	test ViewImageUserProfileFromSpecificEntry {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test text");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Image",
			id = "image-square");

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "User Profile Image");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		PageEditor.viewFragmentEditableImage(
			id = "image-square",
			imageDescription = "",
			imageFileName = "");
	}

}