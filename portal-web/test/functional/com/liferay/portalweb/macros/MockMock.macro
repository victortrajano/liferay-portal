definition {

	macro _backtoInbox {
		AssertClick.assertPartialTextClickAt(
			locator1 = "MockMock#MOCKMOCK_HOME_LINK",
			value1 = "Home");
	}

	macro _gotoMail {
		if ("${newTab}" == "true") {
			Open.openInTheNewTab(locator1 = "http://localhost:8282");

			SelectWindow.selectPopUp(locator1 = "null");
		}
		else {
			Navigator.openSpecificURL(url = "http://localhost:8282");
		}

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_HEADER_LINK",
			value1 = "MockMock");
	}

	macro _gotoMailMessage {
		var key_columnEntry = "${asset}";

		if (isSet(recipient)) {
			var key_recipient = "${recipient}";

			AssertClick.assertPartialTextClickAt(
				locator1 = "MockMock#MOCKMOCK_SPECIFIC_RECIPIENT_SUBJECT_FIELD_LINK",
				value1 = "${asset}");
		}
		else {
			AssertClick.assertPartialTextClickAt(
				locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD_LINK",
				value1 = "${asset}");
		}
	}

	macro _viewMailFromInbox {
		var key_columnEntry = "${asset}";
		var key_recipient = "${recipient}";
		var key_sender = "${sender}";

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_HAVE_EMAILS_MESSAGE",
			value1 = "You have");

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_FROM_FIELD",
			value1 = "${sender}");

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_TO_FIELD",
			value1 = "${recipient}");

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD",
			value1 = "${asset}");
	}

	macro _viewMailMessage {
		var key_asset = "${subject}";

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_MESSAGE_BODY",
			value1 = "${subject}");

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_MESSAGE_BODY",
			value1 = "${content}");

		if (isSet(fromAddress)) {
			AssertTextEquals.assertPartialText(
				locator1 = "MockMock#MOCKMOCK_MESSAGE_BODY",
				value1 = "${fromAddress}");
		}

		if (isSet(toName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "MockMock#MOCKMOCK_MESSAGE_BODY",
				value1 = "${toName}");
		}
	}

	macro clickBodyLink {
		MockMock._gotoMailMessage(
			asset = "${asset}",
			recipient = "${recipient}");

		var key_bodyLink = "${bodyLink}";

		AssertClick(
			locator1 = "MockMock#MOCKMOCK_HTML_BODY_LINK",
			value1 = "${bodyLink}");
	}

	macro deleteMail {
		var key_columnEntry = "${asset}";

		MockMock._gotoMail(newTab = "${newTab}");

		if (isSet(deleteAll)) {
			Click(
				key_text = "Delete all",
				locator1 = "Link#ANY");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD_LINK",
				value1 = "${asset}");

			AssertClick(
				locator1 = "MockMock#MOCKMOCK_DELETE_FIELD",
				value1 = "Delete");

			AssertElementNotPresent(locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD_LINK");
		}
	}

	macro getBodySpecificText {
		var key_asset = "${asset}";
		var key_columnEntry = "${asset}";

		MockMock._gotoMail();

		MockMock._gotoMailMessage(asset = "${asset}");

		MockMock._viewMailMessage(
			content = "${content}",
			subject = "${subject}");

		if (isSet(enableOtp)) {
			var bodyContent = selenium.getText("MockMock#MOCKMOCK_MESSAGE_BODY");
			var bodyContent = StringUtil.extractLast("${bodyContent}", "${specificText}");
			var bodySpecificText = StringUtil.extractFirst("${bodyContent}", "</pre>");

			echo("Your one-time password is: ${bodySpecificText}");
		}
		else {
			var bodyContent = selenium.getText("MockMock#MOCKMOCK_MESSAGE_BODY");
			var bodyContent = StringUtil.extractLast("${bodyContent}", "${specificText}");
			var bodySpecificText = StringUtil.extractFirst("${bodyContent}", "${extractFirstText}");
			var bodySpecificText = StringUtil.trim("${bodySpecificText}");
		}

		return "${bodySpecificText}";

		while (IsElementPresent(locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD_LINK")) {
			MockMock.deleteMail(asset = "${asset}");
		}
	}

	macro getHTMLBodyFormattedText {
		MockMock._gotoMail(newTab = "${newTab}");

		AssertVisible(
			key_columnEntry = "${subject}",
			key_sender = "${sender}",
			locator1 = "MockMock#MOCKMOCK_FROM_FIELD");

		AssertVisible(
			key_columnEntry = "${subject}",
			key_recipient = "${recipient}",
			locator1 = "MockMock#MOCKMOCK_TO_FIELD");

		MockMock._gotoMailMessage(
			asset = "${subject}",
			recipient = "${recipient}");

		WaitForVisible(locator1 = "MockMock#MOCKMOCK_HTML_BODY_FORMATTED_FIELD");

		var text = selenium.getText("MockMock#MOCKMOCK_HTML_BODY_FORMATTED_FIELD");

		return "${text}";
	}

	macro openBodyLink {
		var key_asset = "${asset}";

		MockMock._gotoMail();

		MockMock._gotoMailMessage(asset = "${asset}");

		MockMock._viewMailMessage(
			content = "${content}",
			subject = "${subject}");

		var bodyContent = selenium.getText("MockMock#MOCKMOCK_MESSAGE_BODY");
		var bodyContent = StringUtil.extractLast("${bodyContent}", " at ");
		var bodyURL = StringUtil.extractFirst("${bodyContent}", ".<br />");

		Navigator.openSpecificURL(url = "${bodyURL}");
	}

	macro openCalendarBodyLink {
		var key_asset = "${asset}";

		MockMock._gotoMail();

		MockMock._gotoMailMessage(asset = "${asset}");

		MockMock._viewMailMessage(
			content = "${content}",
			subject = "${subject}");

		var bodyContent = selenium.getText("MockMock#MOCKMOCK_MESSAGE_BODY");
		var bodyContent = StringUtil.extractLast("${bodyContent}", "href=\"");
		var bodyURL = StringUtil.extractFirst("${bodyContent}", "\"");

		Navigator.openSpecificURL(url = "${bodyURL}");
	}

	macro openMockMock {
		MockMock._gotoMail();
	}

	macro viewMail {
		MockMock._gotoMail();

		MockMock._viewMailFromInbox(
			asset = "${asset}",
			recipient = "${recipient}",
			sender = "${sender}");

		MockMock._gotoMailMessage(
			asset = "${asset}",
			recipient = "${recipient}");

		MockMock._viewMailMessage(
			content = "${content}",
			fromAddress = "${fromAddress}",
			subject = "${subject}",
			toName = "${toName}");

		MockMock._backtoInbox();
	}

	macro viewMailForOTP {
		MockMock._gotoMail();

		var key_columnEntry = "${subject}";
		var key_sender = "${sender}";

		AssertTextEquals(
			locator1 = "MockMock#MOCKMOCK_FROM_FIELD",
			value1 = "${sender}");

		AssertTextEquals(
			locator1 = "MockMock#MOCKMOCK_SUBJECT_FIELD",
			value1 = "${subject}");

		MockMock._gotoMailMessage(asset = "${subject}");

		var key_asset = "${content}";

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_MESSAGE_BODY",
			value1 = "${content}");
	}

	macro viewNoMail {
		MockMock._gotoMail();

		AssertElementPresent(locator1 = "MockMock#MOCKMOCK_NO_EMAIL_IN_QUEUE");
	}

	macro viewUnformattedHTMLText {
		MockMock._gotoMail();

		MockMock._viewMailFromInbox(
			asset = "${asset}",
			recipient = "${recipient}",
			sender = "${sender}");

		MockMock._gotoMailMessage(
			asset = "${subject}",
			recipient = "${recipient}");

		AssertTextEquals.assertPartialText(
			locator1 = "MockMock#MOCKMOCK_HTML_BODY_UNFORMATTED_FIELD",
			value1 = "${unFormattedContent}");
	}

}