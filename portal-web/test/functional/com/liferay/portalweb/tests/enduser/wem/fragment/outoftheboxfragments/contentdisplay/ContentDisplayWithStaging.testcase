@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-127548. The changes of web content won't be shown in Content Display in live site until publish to live."
	@priority = "4"
	test PublishEditedWebContentToLive {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Web Content Title");
		}

		task ("Add a content page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				webcontent = "true",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PageEditor.clickPublish();
		}

		task ("View the displayed content at view mode in staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");
		}

		task ("Publish to Live via page") {
			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("View the displayed content at view mode in live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");
		}

		task ("Edit the web content in staging site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name-staging");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View the edited web content is shown at view mode in staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test site Name Staging");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content Edit");
		}

		task ("View the original web content is still shown at view mode in live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test site Name");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");
		}

		task ("Publish to Live via page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("View the edited web content is shown at view mode in live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test site Name");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content Edit");
		}
	}

	@description = "This is a test for LPS-101248. Can select a custom web content template as a "Template" for web content selected in Content Display when enable live."
	@priority = "2"
	test SelectCustomWebContentTemplateInContentDisplay {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Web Content Title");
		}

		task ("Add a new template for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name-staging");

			NavItem.gotoTemplates();

			var templateScript = '''<a>${content.getData()}</a>''';

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a content page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			PageEditor.clickPublish();
		}

		task ("View the web content is shown in Content Display") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

}