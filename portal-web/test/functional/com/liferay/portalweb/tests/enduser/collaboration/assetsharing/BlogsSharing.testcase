@component-name = "portal-collaboration"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Sharing";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "",
			entryTitle = "Blogs Entry Title",
			guestPermissions = "false");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();
		}
	}

	@description = "This case ensures that sharing permissions can be updated through Shared by Me."
	@priority = "4"
	@refactordone
	test CanChangePermissionsViaSharedByMe {
		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			noAutocomplete = "true",
			sharingPermissions = "Update",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		Asset.openTosharedContent(
			navTab = "Shared by Me",
			siteURLKey = "guest");

		Asset.gotoManageCollaboratorsViaSharedByMe(contentTitle = "Blogs Entry Title");

		Asset.changePermission(
			selectPermission = "Can View",
			userName = "userfn userln");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Blogs Entry Title",
			ownerName = "Test Test");

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "Blogs Entry Title",
			openNotification = "true",
			ownerName = "Test Test");

		BlogsEntry.viewSharedAsset(
			contentSharingPermission = "View",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test ensures that when a blog entry that was shared is deleted, it cannot be accessed."
	@priority = "5"
	@refactordone
	test CannotViewDeletedEntryViaNotification {
		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			noAutocomplete = "true",
			sharingPermissions = "Update",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		JSONBlog.moveEntryToTrash(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		AssertTextEquals(
			locator1 = "Sharing#NOTIFICATIONS_DELETE_ENTRY_TITLE",
			value1 = "Notification no longer applies.");

		AssertTextEquals(
			locator1 = "Sharing#NOTIFICATIONS_DELETE_ENTRY_CONTENT",
			value1 = "Notification for Sharing was deleted.");
	}

	@description = "This test ensures a user can only comment on a blog entry once it is shared with him."
	@priority = "5"
	@refactordone
	test CanShareWithCommentPermissions {
		property portal.acceptance = "true";

		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			sharingPermissions = "Comment",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "commenting",
			contentTitle = "Blogs Entry Title",
			openNotification = "true",
			ownerName = "Test Test");

		BlogsEntry.viewSharedAsset(
			contentSharingPermission = "Comment",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Comments.addPG(entryComment = "test");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "test",
			userFullName = "userfn userln");
	}

	@description = "This test ensures a user can update a blog entry once it is shared with him."
	@priority = "5"
	@refactordone
	test CanShareWithUpdatePermissions {
		property portal.acceptance = "true";

		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			sharingPermissions = "Update",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "updating",
			contentTitle = "Blogs Entry Title",
			openNotification = "true",
			ownerName = "Test Test");

		NotificationsPortlet.configureNotificationPG(menuItem = "Edit");

		BlogsEntry.editEntryContent(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entrySubtitle = "",
			entrySubtitleEdit = "Blogs Entry Subtitle Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit");

		Button.clickPublish();

		BlogsEntry.viewSharedAsset(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This test ensures a user can only view a blog entry once it is shared with him."
	@priority = "5"
	test CanShareWithViewPermissions {
		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Blogs Entry Title",
			openNotification = "true",
			ownerName = "Test Test");

		BlogsEntry.viewSharedAsset(
			contentSharingPermission = "View",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This test asserts that proper notifications are sent based on sharing permissions granted."
	@priority = "5"
	@refactordone
	test CanViewSharingNotifications {
		property portal.acceptance = "true";

		for (var sharingPermissions : list "View,Update,Comment") {
			BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

			Asset.share(
				sharingPermissions = "${sharingPermissions}",
				userEmailAddress = "userea@liferay.com",
				userName = "userfn userln");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "3");

		for (var contentSharingPermission : list "viewing,updating,commenting") {
			Notifications.gotoNotifications();

			Notifications.viewNewSharedContent(
				contentSharingPermission = "${contentSharingPermission}",
				contentTitle = "Blogs Entry Title",
				ownerName = "Test Test");
		}
	}

}