@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			Navigator.openSiteURL(siteName = "Guest");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Adaptive Media");

			if (IsElementPresent(key_imageName = "Image Resolution", locator1 = "AdaptiveMediaTable#NAME")) {
				AdaptiveMedia.disableImageResolution(
					imageName = "Image Resolution",
					imageState = "Disabled",
					percentAdapted = "0");

				AdaptiveMedia.deleteImageResolution(imageName = "Image Resolution");
			}
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to directly selected image in fragment with background image editable field in display page template."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForBackgroundImageDirectlySelectedInBannerCenter {
		property portal.acceptance = "true";

		task ("Add a display page template with Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Banner Center fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Directly select an image with width greater than 2000px as background image of Banner Center") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Direct",
				panel = "Styles",
				uploadFileName = "high_resolution_photo.jpg");

			PageEditor.viewContainerStyle(backgroundImage = "high_resolution_photo.jpg");
		}

		task ("Take down the Width and File Size of image resolution in Desktop viewport") {
			var fileSizeDesktop = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");
		}

		task ("Assert the Width and File Size of image resolution equal with orignal image") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "5464");

			TestUtils.assertEquals(
				actual = "${fileSizeDesktop}",
				expected = "4405");
		}

		task ("Change to the Tablet viewport") {
			Click(
				key_deviceType = "Tablet",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = "3000");
		}

		task ("Take down the Width and File Size of image resolution in Tablet viewport") {
			var fileSizeTablet = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");
		}

		task ("Assert the Width of selected image resolution is 1000px") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "1000");
		}

		task ("Assert the File Size become smaller than Desktop viewport") {
			TestUtils.isGreaterThan(
				actual = "${fileSizeDesktop}",
				expected = "${fileSizeTablet}");

			PortletEntry.publish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//div[contains(@class,'bg-gray500Color')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}

		task ("Change to the Tablet Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//div[contains(@class,'bg-gray500Color')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to directly selected background image in Container with padding settings in display page template."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForBackgroundImageDirectlySelectedInContainer {
		property portal.acceptance = "true";

		task ("Add a display page template with Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Container element to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Directly select an image with width greater than 2000px as background image of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Direct",
				paddingBottom = "3",
				paddingTop = "3",
				panel = "Styles",
				uploadFileName = "high_resolution_photo.jpg");

			PageEditor.viewContainerStyle(
				backgroundImage = "high_resolution_photo.jpg",
				paddingBottom = "3",
				paddingTop = "3");
		}

		task ("Take down the Width and File Size of image resolution in Desktop viewport") {
			var fileSizeDesktop = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");
		}

		task ("Assert the Width and File Size of image resolution equal with orignal image") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "5464");

			TestUtils.assertEquals(
				actual = "${fileSizeDesktop}",
				expected = "4405");
		}

		task ("Change to the Portrait Phone viewport") {
			Click(
				key_deviceType = "Portrait Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = "3000");
		}

		task ("Take down the Width and File Size of image resolution in Portrait Phone viewport") {
			var fileSizePortraitPhone = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");
		}

		task ("Assert the Width of selected image resolution is 1000px") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "1000");
		}

		task ("Assert the File Size become smaller than Desktop viewport") {
			TestUtils.isGreaterThan(
				actual = "${fileSizeDesktop}",
				expected = "${fileSizePortraitPhone}");

			PortletEntry.publish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//div[contains(@class,'pb-3')][contains(@class,'pt-3')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}

		task ("Change to the Mobile Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "smartphone",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "smartphone",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//div[contains(@class,'pb-3')][contains(@class,'pt-3')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to directly selected image in fragment with image editable field in display page template."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForImageDirectlySelectedInCard {
		property portal.acceptance = "true";

		task ("Add a display page template with Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Card fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");
		}

		task ("Directly select an image with width greater than 2000px in Card fragment") {
			PageEditor.editFragmentImage(
				fileName = "high_resolution_photo.jpg",
				fragmentName = "Card",
				id = "01-img");

			PageEditor.viewFragmentEditableImage(
				id = "01-img",
				imageDescription = "",
				imageFileName = "high_resolution_photo.jpg");
		}

		task ("Take down the Width and File Size of image resolution in Desktop viewport") {
			var fileSizeDesktop = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Auto image resolution is selected") {
			AssertSelectedLabel(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Auto");
		}

		task ("Assert the Width and File Size of image resolution equal with orignal image") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "5464");

			TestUtils.assertEquals(
				actual = "${fileSizeDesktop}",
				expected = "4405");
		}

		task ("Change to the Landscape Phone viewport") {
			Click(
				key_deviceType = "Landscape Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = "3000");
		}

		task ("Take down the Width and File Size of image resolution in Landscape Phone viewport") {
			var fileSizeLandscapePhone = PageEditor.getFileSizeOfSelectedImageResolution();

			var width = PageEditor.getWidthOfSelectedImageResolution();
		}

		task ("Assert Auto image resolution is selected") {
			AssertSelectedLabel(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Auto");
		}

		task ("Assert the Width of selected image resolution is 1000px") {
			TestUtils.assertEquals(
				actual = "${width}",
				expected = "1000");
		}

		task ("Assert the File Size become smaller than Desktop viewport") {
			TestUtils.isGreaterThan(
				actual = "${fileSizeDesktop}",
				expected = "${fileSizeLandscapePhone}");

			PortletEntry.publish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			PageEditor.viewFragmentEditableImage(
				id = "01-img",
				imageDescription = "",
				imageFileName = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//img[contains(@data-lfr-editable-id,'01-img') and contains(@src,'high_resolution_photo.jpg')]");
		}

		task ("Change to the Tablet Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			PageEditor.viewFragmentEditableImage(
				id = "01-img",
				imageDescription = "",
				imageFileName = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//img[contains(@data-lfr-editable-id,'01-img') and contains(@src,'high_resolution_photo.jpg')]");
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to mapping background image of a fragment with editable field in display page template."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForMappingBackgroundImageInBannerCenter {
		property portal.acceptance = "true";

		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a display page template based on Web Content Article and new structure") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Banner Center fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Image field to background image editable field") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Image",
				panel = "Styles");
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			PortletEntry.publish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Select an image with width greater than 2000px in Image field") {
			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "high_resolution_photo.jpg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//div[contains(@class,'bg-gray500Color')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}

		task ("Change to the Mobile Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "smartphone",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "smartphone",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//div[contains(@class,'bg-gray500Color')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to mapping background image of the Container with padding settings."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForMappingBackgroundImageInContainer {
		property portal.acceptance = "true";

		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a display page template based on Web Content Article and new structure") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Container element to display page template") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Mapping the Image field to the background image of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Image",
				paddingBottom = "3",
				paddingTop = "3",
				panel = "Styles");
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			PortletEntry.publish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Select an image with width greater than 2000px in Image field") {
			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "high_resolution_photo.jpg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//div[contains(@class,'pb-3')][contains(@class,'pt-3')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}

		task ("Change to the Tablet Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			ContentPages.viewFragmentBackgroundImage(image = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//div[contains(@class,'pb-3')][contains(@class,'pt-3')][contains(@style,'high_resolution_photo.jpg')]",
				type = "backgroundImage");
		}
	}

	@description = "This is a test for LPS-125191. The image resolution is applied to mapping image of a fragment with editable field in display page template."
	@priority = "5"
	@uitest
	test ViewAutoImageResolutionForMappingImageInCard {
		property portal.acceptance = "true";

		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a display page template based on Web Content Article and new structure") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page Name",
				subType = "WC Structure Name");
		}

		task ("Add a Card fragment to display page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");
		}

		task ("Map the Image field to image editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Image",
				fragmentName = "Card",
				id = "01-img");
		}

		task ("Assert Resolution field is not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Resolution",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			PortletEntry.publish();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Select an image with width greater than 2000px in Image field") {
			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "high_resolution_photo.jpg",
				webContentTitle = "Web Content Title");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View Content in display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Display Page Name");
		}

		task ("Select Desktop Device in simulation menu") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			PageEditor.viewFragmentEditableImage(
				id = "01-img",
				imageDescription = "",
				imageFileName = "high_resolution_photo.jpg");
		}

		task ("Assert the orignal image is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/documents/",
				element = "//img[contains(@data-lfr-editable-id,'01-img') and contains(@src,'high_resolution_photo.jpg')]");
		}

		task ("Change to the Tablet Device in simulation menu") {
			SelectFrameTop();

			Click(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DATA_DEVICE_BUTTON");

			AssertElementPresent(
				key_deviceType = "tablet",
				locator1 = "ControlMenuPreviewPanel#PREVIEW_DEVICE_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "//iframe[@id='simulationDeviceIframe']");
		}

		task ("Assert the mapping image is shown in Preview modal") {
			PageEditor.viewFragmentEditableImage(
				id = "01-img",
				imageDescription = "",
				imageFileName = "high_resolution_photo.jpg");
		}

		task ("Assert the Preview-1000x0 is selected automatically") {
			PageEditor.assertAutoImageResolution(
				adaptiveMediaName = "/Preview-1000x0/",
				element = "//img[contains(@data-lfr-editable-id,'01-img') and contains(@src,'high_resolution_photo.jpg')]");
		}
	}

}