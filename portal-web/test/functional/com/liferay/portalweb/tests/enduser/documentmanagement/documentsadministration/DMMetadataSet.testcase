@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMDocumentType.tearDownCP();

			DMMetadataSet.tearDownCP();

			User.logoutPG();
		}
	}

	@priority = "4"
	@refactorneeded
	test AddToAndRemoveFromDocumentType {
		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.delete(
			metadataSetHasReference = "true",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.edit(
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name",
			removeMetadataSet = "true");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.delete(metadataSetName = "DM Metadata Set Name");
	}

	@description = "This ensures that a metadata set can be removed from the entry Menu."
	@priority = "5"
	@refactorneeded
	test DeleteEntry {
		property portal.acceptance = "true";

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.viewDefaultCP();

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.delete(
			metadataSetName = "DM Metadata Set Name",
			searchMetadataSet = "true");

		DMMetadataSet.viewMetadataSetNotFoundCP();
	}

	@description = "This test covers LPS-128046. It ensures that a metadata set can be removed from the management bar."
	@priority = "4"
	@refactorneeded
	test DeleteEntryViaManagementBar {
		property portal.acceptance = "true";

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.delete(
			deleteViaManagementBar = "true",
			metadataSetName = "DM Metadata Set Name");
	}

	@description = "This ensures that the user can delete fields within a metadata set."
	@priority = "3"
	@refactorneeded
	test DeleteFields {
		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addFields(fieldNameList = "Text,Date,Image");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		for (var fieldFieldLabel : list "Numeric,Text,Date,Image") {
			AssertElementPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMDocumentType.deleteFields(
			dmDocumentTypeName = "DM Metadata Set Name",
			fieldFieldLabel = "Text,Date");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		for (var fieldFieldLabel : list "Text,Date") {
			AssertElementNotPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		for (var fieldFieldLabel : list "Numeric,Image") {
			AssertElementPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@description = "This ensures that the user can create a document using edited image field inside metadata set."
	@priority = "4"
	@refactorneeded
	test ViewDocumentwithEditedImageField {
		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DDLDataDefinition.save();

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			imageField = "Document_1.jpg",
			navTab = "Documents and Media",
			numericField = "123");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(imageName = "Document_1.jpg");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Photo",
			dmDocumentTypeFieldRequiredEdit = "Photo",
			dmDocumentTypeName = "DM Metadata Set Name",
			dmDocumentTypeNameEdit = "DM Metadata Set Name Edit",
			fieldFieldLabel = "Image",
			fieldFieldLabelEdit = "Photo");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Photo",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Photo");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name",
			fieldFieldLabel = "Photo",
			imageDescription = "Photo Description",
			imageField = "Document_2.jpg",
			navTab = "Documents and Media",
			numericField = "123");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(
			fieldFieldLabel = "Photo",
			imageName = "Document_2.jpg");
	}

	@description = "This ensures that the user can create a document using edited text field inside metadata set."
	@priority = "4"
	@refactorneeded
	test ViewDocumentwithEditedTextField {
		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = "123",
			textField = "DM Document Text");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(textContent = "DM Document Text");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Company",
			dmDocumentTypeFieldRequiredEdit = "Company",
			dmDocumentTypeName = "DM Metadata Set Name",
			dmDocumentTypeNameEdit = "DM Metadata Set Name Edit",
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Company");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Company",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Company");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.png",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name",
			fieldFieldLabel = "Company",
			numericField = "123",
			textField = "Liferay");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(
			textContent = "Liferay",
			textFieldLabel = "Company");
	}

	@description = "This ensures that the user can create a document using edited upload field inside metadata set."
	@priority = "4"
	@refactorneeded
	test ViewDocumentwithEditedUploadField {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Upload",
			fieldName = "Upload");

		DDLDataDefinition.save();

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			documentsAndMediaField = "Document_1.doc",
			fieldFieldLabel = "Upload",
			navTab = "Documents and Media",
			numericField = "123");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(uploadFile = "Document_1.doc");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Resume",
			dmDocumentTypeFieldRequiredEdit = "Resume",
			dmDocumentTypeName = "DM Metadata Set Name",
			dmDocumentTypeNameEdit = "DM Metadata Set Name Edit",
			fieldFieldLabel = "Upload",
			fieldFieldLabelEdit = "Resume");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Resume",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		FormFields.viewRequiredAsteriskDataField(fieldFieldLabel = "Resume");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title 2",
			dmDocumentTypeName = "DM Document Type Name",
			documentsAndMediaField = "Document_1.doc",
			fieldFieldLabel = "Resume",
			navTab = "Documents and Media",
			numericField = "123");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

		DMDocument.viewDocumentTypePG(
			uploadFieldLabel = "Resume",
			uploadFile = "Document_1.doc");
	}

}