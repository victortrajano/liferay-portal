@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Content Pages,Content Page Templates";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-140483. The site admin cannot create page templates with same names from content page in the same collection."
	@priority = "4"
	test CannotCreatePageTemplatesWithSameNameFromContentPageInTheSameCollection {
		task ("Create a content page template from the content page under page template collection") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View error message shown when create page template with same name from content page in the same collection") {
			PageEditor.createPageTemplate(
				alertMessage = "A page template entry with that name already exists.",
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from a content page with elements."
	@priority = "5"
	test CreatePageTemplateFromContentPage {
		property portal.acceptance = "true";

		task ("Add a Heading fragment and an Asset Publisher widget to content page then publish") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Heading");

			PageEditor.clickPublish();
		}

		task ("Create a content page template from the content page under page template collection") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template Name");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Content Page Template Name",
				workflowStatus = "Draft");
		}

		task ("View the Heading and Asset Publisher are shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name");

			for (var elementName : list "Heading,Asset Publisher") {
				PageEditor.viewFragment(fragmentName = "${elementName}");
			}
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from content page based on content page template."
	@priority = "5"
	test CreatePageTemplateFromContentPageBasedOnContentPageTemplate {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Content Page Template Name 1",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.clickPublish();
		}

		task ("Add a Button fragment to a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Content Page Template Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Create a content page template from the content page under page template collection") {
			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name 2");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template Name 2");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Content Page Template Name 2",
				workflowStatus = "Draft");
		}

		task ("View the Heading and Button are shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name 2");

			for (var fragmentName : list "Heading,Button") {
				PageEditor.viewFragment(fragmentName = "${fragmentName}");
			}
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from content page based on master page."
	@priority = "5"
	test CreatePageTemplateFromContentPageBasedOnMasterPage {
		property portal.acceptance = "true";

		task ("Add a Header Dark fragment to the header of master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Navigation Bars",
				dropTarget = "Header",
				fragmentName = "Header Dark",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Add a Button fragment to a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Create a content page template from the content page under page template collection") {
			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template Name");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Content Page Template Name",
				workflowStatus = "Draft");
		}

		task ("View the Header Dark and Button are shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#NAVIGATION_BARS");

			PageEditor.viewFragment(fragmentName = "Button");
		}

		task ("View the content page template is based on master page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Navigator.gotoNavTab(navTab = "Master");

			AssertElementPresent(
				key_card = "Custom Masters Page Template",
				locator1 = "Card#CARD_SELECTED");
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from content page based on style book."
	@priority = "5"
	test CreatePageTemplateFromContentPageBasedOnStyleBook {
		property portal.acceptance = "true";

		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");
		}

		task ("Change the Font Family Base to times") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBook(styleBookName = "Test Style Book Name");

			StyleBooks.selectForm(formName = "Typography");

			StyleBooks.expandSection(sectionName = "Font Family");

			Type(
				key_fieldLabel = "Font Family Base",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "times");

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("Add a Heading to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Apply the new style book to content page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");
		}

		task ("Create a content page template from the content page under page template collection") {
			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template Name");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Content Page Template Name",
				workflowStatus = "Draft");
		}

		task ("View the font family of Heading is times in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "font-family",
				value1 = "times");
		}

		task ("View the style book applied to content page template") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Navigator.gotoNavTab(navTab = "Style Book");

			AssertElementPresent(
				key_card = "Test Style Book Name",
				locator1 = "Card#CARD_SELECTED");
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from an empty content page."
	@priority = "4"
	test CreatePageTemplateFromEmptyContentPage {
		task ("Create a content page template from the empty content page under page template collection") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template Name");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Content Page Template Name",
				workflowStatus = "Draft");
		}

		task ("View the content page is still at draft status") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.viewPageStatus(
				index = "1",
				pageName = "Test Page Name",
				status = "Draft");
		}
	}

}