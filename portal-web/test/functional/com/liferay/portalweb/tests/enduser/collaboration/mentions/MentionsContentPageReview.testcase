@component-name = "portal-collaboration"
definition {

	property custom.properties = "default.layout.template.id=1_column${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Page Review";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add second user") {
			JSONUser.addUser(
				userEmailAddress = "user2@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "user2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user2@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "user2@liferay.com",
				userLoginFullName = "userfn userln");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This case ensures a user can be mentioned in a comment when he has valid permission."
	@priority = "5"
	@refactordone
	test CanMentionUserWithValidPermissions {
		JSONUser.addUser(
			userEmailAddress = "user1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "user1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "user1@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "user1@liferay.com",
			userLoginFullName = "userfn1 userln1");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONRole.addRegularRole(
			roleKey = "Regrole Name",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.portal.kernel.model.Layout",
			roleTitle = "Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Regrole Name",
			userEmailAddress = "user1@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.gotoCommentViaFragment(
			fragmentName = "Title",
			position = "1");

		PageEditor.viewMentionsDisplayOption(
			fragmentComment = "@user",
			mentionsUserScreenName = "user1",
			noMentionsUserScreenName = "user2");
	}

	@description = "This case ensures that the user can mention the other user in a comment."
	@priority = "5"
	@refactordone
	test CanViewCommentMentionedUser {
		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "user2@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			fragmentComment = "Comment by Test",
			fragmentName = "Title",
			mentionsUserFullName = "userfn userln",
			mentionsUserScreenName = "user2");

		PageEditor.viewComment(
			fragmentComment = "Comment by Test ",
			mentionsUserFullName = "userfn userln",
			mentionsUserScreenName = "user2");
	}

	@description = "This case ensures a user cannot access a comment he is mentioned on after his permissions are revoked."
	@priority = "5"
	@refactordone
	test CanViewMentionAfterRevokingPermissions {
		JSONRole.addRegularRole(
			roleKey = "Regrole Name",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.portal.kernel.model.Layout",
			roleTitle = "Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Regrole Name",
			userEmailAddress = "user2@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			fragmentComment = "Comment by Test",
			fragmentName = "Title",
			mentionsUserFullName = "userfn userln",
			mentionsUserScreenName = "user2");

		PageEditor.viewComment(
			fragmentComment = "Comment by Test ",
			mentionsUserFullName = "userfn userln",
			mentionsUserScreenName = "user2");

		Permissions.removePermissionViaAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.portal.kernel.model.Layout",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "user2@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewNoPermissions(
			contentBody = "user2",
			notificationCount = "1");
	}

}