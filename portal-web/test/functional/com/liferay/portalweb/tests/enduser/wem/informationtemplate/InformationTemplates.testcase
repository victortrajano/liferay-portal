@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content and Application Templates";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could create an information template."
	@priority = "5"
	@uitest
	test AddInformationTemplate {
		property portal.acceptance = "true";

		task ("Navigate to the Information Templates admin") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Templates");
		}

		task ("Add an information template for Web Content Article and Basic Web Content") {
			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");
		}

		task ("Add the Title and Description fields") {
			for (var fieldName : list "Title,Description") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}
		}

		task ("Add description") {
			InformationTemplates.addDescription(informationTemplateDescription = "This is a description");
		}

		task ("View the Item Type, Item Subtype, Template Key, URL, WebDAV URL fields") {
			AssertVisible(
				label = "Item Type",
				locator1 = "InformationTemplates#TEMPLATE_TYPE",
				type = "Web Content Article");

			AssertVisible(
				label = "Item Subtype",
				locator1 = "InformationTemplates#TEMPLATE_TYPE",
				type = "Basic Web Content");

			for (var fieldName : list "Template Key,URL,WebDAV URL") {
				AssertTextNotEquals(
					key_text = "${fieldName}",
					locator1 = "TextInput#ANY",
					value1 = "");
			}
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");
		}

		task ("Access to the template editor") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template",
				item = "Edit");
		}

		task ("View the script content shown in code mirror") {
			InformationTemplates.viewScriptContent(scriptContent = "title.getData()");

			InformationTemplates.viewScriptContent(scriptContent = "description.getData()");
		}

		task ("View the description in Properties panel") {
			InformationTemplates.viewDescription(informationTemplateDescription = "This is a description");
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could create an information template via script file."
	@priority = "4"
	@uitest
	test AddInformationTemplateViaScriptFile {
		task ("Navigate to the Information Templates admin") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add an information template for Blogs Entry") {
			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemType = "Blogs Entry");
		}

		task ("Import a script file") {
			InformationTemplates.importScript(scriptFile = "information_template_blogs.ftl");
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemType = "Blogs Entry");
		}

		task ("Access to the template editor") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template",
				item = "Edit");
		}

		task ("View the script content shown in code mirror") {
			InformationTemplates.viewScriptContent(scriptContent = "title.getData()");

			InformationTemplates.viewScriptContent(scriptContent = "coverImage.getData()");

			InformationTemplates.viewScriptContent(scriptContent = "description.getData()");

			InformationTemplates.viewScriptContent(scriptContent = "displayDate.getData()");

			InformationTemplates.viewScriptContent(scriptContent = '''dateUtil.getDate(displayDate_DateObj, "dd MMM yyyy - HH:mm:ss", locale)''');
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could copy an information template."
	@priority = "4"
	@uitest
	test CopyInformationTemplate {
		task ("Add an information template for Asset") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");

			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemType = "Asset");
		}

		task ("Add a Title field") {
			InformationTemplates.addField(
				fieldName = "Title",
				panelTitle = "Basic Information");
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemType = "Asset");
		}

		task ("Copy the information template") {
			InformationTemplates.copyCP(
				informationTemplateCopyName = "Test Information Template (Copy)",
				informationTemplateName = "Test Information Template");
		}

		task ("View both information templates shown") {
			for (var informationTemplateName : list "Test Information Template,Test Information Template (Copy)") {
				InformationTemplates.viewTemplate(
					informationTemplateName = "${informationTemplateName}",
					itemType = "Asset");
			}
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could define permissions of an information template."
	@priority = "4"
	@uitest
	test DefinePermissionsOfInformationTemplate {
		task ("Add a custom object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Additional Order",
				objectName = "AdditionalOrder",
				pluralLabelName = "Additional Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Order Number",
				fieldName = "orderNumber",
				fieldType = "String",
				isRequired = "true",
				objectName = "AdditionalOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "AdditionalOrder");
		}

		task ("Add an information template for Object and User") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");

			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemType = "Additional Order");
		}

		task ("Add the User Name and Order Number fields") {
			InformationTemplates.addField(
				fieldName = "User Name",
				panelTitle = "Basic Information");

			InformationTemplates.addField(
				fieldName = "Order Number",
				panelTitle = "Additional Order");
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemType = "Additional Order");
		}

		task ("Grant the View permission of information template to Power User") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template",
				item = "Permissions");

			IFrame.selectPermissionsFrame();

			PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
				addOrRemoveViewPermission = "Add",
				roleList = "Power User");

			IFrame.closeFrame();
		}

		task ("View the Power User has View permission of information template") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template",
				item = "Permissions");

			IFrame.selectPermissionsFrame();

			PermissionsInline.viewPermissionsChecked(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Power User");
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could delete an information template."
	@priority = "4"
	@uitest
	test DeleteInformationTemplate {
		task ("Add an information template for Document and Basic Document") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");

			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemSubtype = "Basic Document",
				itemType = "Document");
		}

		task ("Add the Title and Preview Image fields") {
			for (var fieldName : list "Title,Preview Image") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemSubtype = "Basic Document",
				itemType = "Document");
		}

		task ("Delete the information template") {
			InformationTemplates.deleteCP(informationTemplateName = "Test Information Template");
		}

		task ("View the information template is deleted") {
			InformationTemplates.viewTemplateNotPresent(informationTemplateName = "Test Information Template");
		}
	}

	@description = "This is a use case for LPS-124478. The template creator could edit an information template."
	@priority = "5"
	@uitest
	test EditInformationTemplate {
		property portal.acceptance = "true";

		task ("Add an information template for Category") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");

			InformationTemplates.addCP(
				informationTemplateName = "Test Information Template",
				itemType = "Category");
		}

		task ("Add the Name and Vocabulary fields") {
			for (var fieldName : list "Name,Vocabulary") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry") {
			InformationTemplates.viewTemplate(
				informationTemplateName = "Test Information Template",
				itemType = "Category");
		}

		task ("Edit the information template") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template",
				item = "Edit");
		}

		task ("Rename the information template") {
			InformationTemplates.editName(informationTemplateName = "Test Information Template Edited");
		}

		task ("Clear the script content in code mirror") {
			InformationTemplates.inputScript(scriptContent = "");
		}

		task ("Add the Name and Description fields") {
			for (var fieldName : list "Name,Description") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}
		}

		task ("Save the information template") {
			PortletEntry.save();
		}

		task ("View the information template entry is renamed") {
			InformationTemplates.viewTemplate(informationTemplateName = "Test Information Template Edited");
		}

		task ("Edit the information template") {
			InformationTemplates.gotoInformationTemplateEllipsisItem(
				informationTemplateName = "Test Information Template Edited",
				item = "Edit");
		}

		task ("View the edited script content shown in code mirror") {
			InformationTemplates.viewScriptContent(scriptContent = "name.getData()");

			InformationTemplates.viewScriptContent(scriptContent = "description.getData()");
		}
	}

	@description = "This is a use case for LPS-137569. The page creator could use information template in Content Display."
	@priority = "5"
	test MapToContentDisplay {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with description") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				description = "Blogs Entry Description",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a document entry") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Navigate to the Information Templates admin") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add an information template for Web Content Article and Basic Web Content") {
			InformationTemplates.addCP(
				informationTemplateName = "Web Content Information Template",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");
		}

		task ("Add the Title and Content fields") {
			InformationTemplates.addField(
				fieldName = "Title",
				panelTitle = "Basic Information");

			InformationTemplates.addField(
				fieldName = "Content",
				panelTitle = "Content");

			PortletEntry.save();
		}

		task ("Add an information template for Blogs Entry") {
			InformationTemplates.addCP(
				informationTemplateName = "Blogs Entry Information Template",
				itemType = "Blogs Entry");
		}

		task ("Add the Title and Description fields") {
			InformationTemplates.addField(
				fieldName = "Title",
				panelTitle = "Basic Information");

			InformationTemplates.addField(
				fieldName = "Description",
				panelTitle = "Configuration");

			PortletEntry.save();
		}

		task ("Add an information template for Document and Basic Document") {
			InformationTemplates.addCP(
				informationTemplateName = "Document Information Template",
				itemSubtype = "Basic Document",
				itemType = "Document");
		}

		task ("Add the Title and Author fields") {
			for (var fieldName : list "Title,Author Name") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}

			PortletEntry.save();
		}

		task ("Add an information template for Category") {
			InformationTemplates.addCP(
				informationTemplateName = "Category Information Template",
				itemType = "Category");
		}

		task ("Add the Name and Vocabulary fields") {
			for (var fieldName : list "Name,Vocabulary") {
				InformationTemplates.addField(
					fieldName = "${fieldName}",
					panelTitle = "Basic Information");
			}

			PortletEntry.save();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Content Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and information template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "Web Content Information Template",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the title and content of web content are shown") {
			AssertTextEquals(
				index = "1",
				key_fragmentName = "Content Display",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Web Content Title Web Content Content");
		}

		task ("Select the blogs entry and information template in Content Display") {
			PageEditor.editContentDisplay(
				blogs = "true",
				entryTitle = "Blogs Entry Title",
				fragmentName = "Content Display",
				template = "Blogs Entry Information Template");
		}

		task ("View the title and description of blogs are shown") {
			AssertTextEquals(
				index = "1",
				key_fragmentName = "Content Display",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Blogs Entry Title Blogs Entry Description");
		}

		task ("Select the documents and information template in Content Display") {
			PageEditor.editContentDisplay(
				documentandmedia = "true",
				fragmentName = "Content Display",
				imageFileName = "Document Title",
				template = "Document Information Template");
		}

		task ("View the title and author name of documents are shown") {
			AssertTextEquals(
				index = "1",
				key_fragmentName = "Content Display",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Document Title Test Test");
		}

		task ("Select the category and information template in Content Display") {
			PageEditor.editContentDisplay(
				assetTitle = "Category Name",
				categories = "true",
				fragmentName = "Content Display",
				template = "Category Information Template");
		}

		task ("View the category and vocabulary names are shown") {
			AssertTextEquals(
				index = "1",
				key_fragmentName = "Content Display",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Category Name Vocabulary Name");
		}
	}

	@description = "This is a use case for LPS-137569. The page creator could use information template in Collection Display."
	@priority = "5"
	test MapToEditableFieldInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with description") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				description = "Blogs Entry Description",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Navigate to the Information Templates admin") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add an information template for Web Content Article and Basic Web Content") {
			InformationTemplates.addCP(
				informationTemplateName = "Web Content Information Template",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");
		}

		task ("Add the Title and Content fields") {
			InformationTemplates.addField(
				fieldName = "Title",
				panelTitle = "Basic Information");

			InformationTemplates.addField(
				fieldName = "Content",
				panelTitle = "Content");

			PortletEntry.save();
		}

		task ("Add an information template for Blogs Entry") {
			InformationTemplates.addCP(
				informationTemplateName = "Blogs Entry Information Template",
				itemType = "Blogs Entry");
		}

		task ("Add the Title and Description fields") {
			InformationTemplates.addField(
				fieldName = "Title",
				panelTitle = "Basic Information");

			InformationTemplates.addField(
				fieldName = "Description",
				panelTitle = "Configuration");

			PortletEntry.save();
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a manual collection for blogs entry") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Manual Collection");
		}

		task ("Select the blogs entry under manual collection") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Button fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Button");
		}

		task ("Map the information template to Button editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Web Content Information Template",
				fragmentName = "Button",
				id = "link");
		}

		task ("View the title and content of web content are shown") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title Web Content Content",
				fragmentName = "Button",
				id = "link");
		}

		task ("Select the manual collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("Map the information template to Button editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Blogs Entry Information Template",
				fragmentName = "Button",
				id = "link");
		}

		task ("View the title and description of blogs entry are shown") {
			PageEditor.viewFragmentEditableText(
				editableText = "Blogs Entry Title Blogs Entry Description",
				fragmentName = "Button",
				id = "link");
		}
	}

}