@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();

			Picklist.deleteAllPicklistsViaAPI();
		}
	}

	@description = "LPS-136595 - Verify it is possible to cancel the creation of a Picklist"
	@priority = "4"
	test CanCancelCreatePicklist {
		Picklist.gotoPicklists();

		Picklist.cancelPicklist(picklistName = "Picklist Test");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-136595 - Verify it is possible to cancel the creation of a Picklist item"
	@priority = "4"
	test CanCancelCreatePicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "PicklistItemKeyTest",
			picklistItemName = "Picklist Item Name Test");

		Picklist.cancelPicklistButton();

		Picklist.assertPicklistItemNotPresent(
			picklistItemKey = "PicklistItemKeyTest",
			picklistItemName = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify it is possible to cancel the update of a Picklist"
	@priority = "4"
	test CanCancelUpdatePicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.updatePicklistName(picklistName = "Update Picklist Test");

		Picklist.cancelUpdatePicklist();

		Picklist.assertPicklistNotPresent(picklistName = "Update Picklist Test");
	}

	@description = "LPS-136595 - Verify it is possible to create a Picklist"
	@priority = "5"
	test CanCreatePicklist {
		property portal.acceptance = "true";

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Picklist.assertPicklist(picklistName = "Picklist Test");
	}

	@description = "LPS-136595 - Verify it is possible to create an item for a Picklist"
	@priority = "5"
	test CanCreatePicklistItem {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		Picklist.assertPicklistItem(
			picklistItemKey = "picklistItemNameTest",
			picklistItemName = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify it is possible to delete a Picklist"
	@priority = "5"
	test CanDeletePicklist {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "Delete");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-136595 - Verify it is possible to delete a Picklist item"
	@priority = "5"
	test CanDeletePicklistItem {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			picklistItemOption = "Delete");

		Picklist.assertPicklistItemNotPresent(
			picklistItemKey = "PicklistItemKeyTest",
			picklistItemName = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify it is not possible to add special characters for the Key field for a Picklist item"
	@priority = "3"
	test CannotAddSpecialCharacterForPicklistItemKeyField {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "key@",
			picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		Picklist.assertPicklistMessage(picklistMessage = "Key must only contain letters and digits");
	}

	@description = "LPS-136595 - Verify it is not possible to leave Key field empty for a Picklist item"
	@priority = "4"
	test CannotLeavePicklistItemKeyFieldEmpty {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "",
			picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		Picklist.assertRequiredKeyItem();
	}

	@description = "LPS-136595 - Verify it is not possible to leave Name field empty for a Picklist item"
	@priority = "4"
	test CannotLeavePicklistItemNameFieldEmpty {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.addPicklistItemViaUI(picklistItemKey = "PicklistItemKeyTest");

		Picklist.clickSaveButton();

		AssertElementPresent(locator1 = "ObjectAdmin#OBJECT_FIELDS_REQUIRED_ERROR_MESSAGE");
	}

	@description = "LPS-136595 - Verify it is not possible to leave Name field empty for Picklist"
	@priority = "4"
	test CannotLeavePicklistNameFieldEmpty {
		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "");

		AssertElementPresent(locator1 = "ObjectAdmin#OBJECT_FIELDS_REQUIRED_ERROR_MESSAGE");
	}

	@description = "LPS-136595 - Verify it is not possible to update a Picklist item's key"
	@priority = "4"
	test CannotUpdatePicklistItemKey {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			picklistItemOption = "View");

		Picklist.assertDisableKey();
	}

	@description = "LPS-136595 - Verify it is possible to search for a Picklist"
	@priority = "4"
	test CanSearchPicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist 1");

		Picklist.addPicklistViaAPI(picklistName = "Test 2");

		Picklist.gotoPicklists();

		Picklist.searchPicklist(picklistName = "Test 2");

		Picklist.assertPicklist(picklistName = "Test 2");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist 1");
	}

	@description = "LPS-136595 - Verify it is possible to search for a Picklist item"
	@priority = "4"
	test CanSearchPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest1",
			itemName = "Picklist Item 1",
			picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest2",
			itemName = "Test 2",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.searchPicklistItem(picklistItemName = "Test 2");

		Picklist.assertPicklistItem(
			picklistItemKey = "ItemTest2",
			picklistItemName = "Test 2");

		Picklist.assertPicklistItemNotPresent(
			picklistItemKey = "ItemTest1",
			picklistItemName = "Picklist Item 1");
	}

	@description = "LPS-136595 - Verify it is possible to set a different language for Picklists item's name"
	@priority = "3"
	test CanSetDifferentPicklistItemNameLanguage {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest",
			itemName = "Picklist Item",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.optionsPicklistItem(
			itemKey = "ItemTest",
			picklistItemOption = "View");

		Picklist.addLanguageOnPicklistItem(
			itemName = "Teste de entrada",
			newlanguage = "pt-BR");

		Button.clickSave();

		Refresh();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.optionsPicklistItem(
			itemKey = "ItemTest",
			picklistItemOption = "View");

		Picklist.assertPicklistItemByLanguage(
			language = "pt-BR",
			nameItem = "Teste de entrada");
	}

	@description = "LPS-136595 - Verify it is possible to set a different language for Picklists item's name when updating it"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSetDifferentPicklistItemNameLanguageWhenUpdating {

		// TODO LPS-145709 CanSetDifferentPicklistItemNameLanguageWhenUpdating pending implementation

	}

	@description = "LPS-136595 - Verify it is possible to set a different language for a Picklist name"
	@priority = "3"
	test CanSetDifferentPicklistNameLanguage {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.addLanguageOnPicklist(
			itemName = "Teste na lista",
			newlanguage = "pt-BR");

		Button.clickSave();

		Refresh();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.assertPicklistNameByLanguage(
			language = "pt-BR",
			nameItem = "Teste na lista");
	}

	@description = "LPS-136595 - Verify it is possible to update a Picklist item's name"
	@priority = "5"
	test CanUpdatePicklistItemName {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "entryTest",
			itemName = "Entry Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.assertPicklistItemInTable(
			picklistItemKey = "entryTest",
			picklistItemName = "Entry Test");

		Picklist.updatePicklistItemName(
			itemkey = "entryTest",
			newItemName = "Update Entry");

		Button.clickSave();

		Refresh();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.assertPicklistItemInTable(
			picklistItemKey = "entryTest",
			picklistItemName = "Update Entry");
	}

	@description = "LPS-136595 - Verify it is possible to update a Picklist name"
	@priority = "5"
	test CanUpdatePicklistName {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Picklist Test");

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-136595 - Verify it is possible to view a Picklist"
	@priority = "4"
	test CanViewPicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.assertPicklistDetails(title = "Basic Info");
	}

	@description = "LPS-136595 - Verify it is possible to view a Picklist item"
	@priority = "4"
	test CanViewPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "View");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			picklistItemOption = "View");

		Picklist.assertPicklistItemDetails();
	}

	@description = "LPS-136595 - Verify the empty state message when there is no Picklist"
	@priority = "3"
	test EmptyStateMessageDisplayedWhenNoPicklist {
		Picklist.gotoPicklists();

		Picklist.assertEmptyStateMessageDisplayed();
	}

	@description = "LPS-136595 - Verify the empty state message when where is no items for a Picklist"
	@priority = "3"
	test EmptyStateMessageDisplayedWhenNoPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.selectPickilistModalFrame();

		Picklist.assertEmptyStateMessageDisplayed();
	}

	@description = "LPS-140407 - Verify that the Key field is autofilled when the Name field is filled"
	@priority = "4"
	test KeyFieldIsAutofilled {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test");

		Picklist.assertItemNameAndItemKeyOnModal(
			itemKey = "itemTest",
			itemName = "Item Test");
	}

	@description = "LPS-136595 - Verify that the translated Picklist item's name will be displayed on the Object layout"
	@priority = "3"
	test ViewTranslatedPicklistItemNameOnObjectLayout {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "entryTest",
			itemName = "Entry Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.assertPicklistDetails(title = "Items");

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		Picklist.addLanguageOnPicklistItem(
			itemName = "Teste de entrada",
			newlanguage = "pt-BR");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Entry Test");

		User.openUsersAdmin();

		User.editDisplaySettingsCP(
			languageName = "português (Brasil)",
			userScreenName = "test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Teste de entrada");

		LexiconEntry.gotoAdd();

		Picklist.assertEntryRelationshipFieldPicklist(
			newEntry = "Teste de entrada",
			selectField = "Escolha");
	}

	@description = "LPS-136595 - Verify that the updating or deleting a picklist item warn message is displayed"
	@priority = "3"
	test WarnMessageDisplayedOnPickListItemScreen {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.selectPickilistModalFrame();

		Picklist.assertPicklistMessage(picklistMessage = "Updating or deleting a picklist item will automatically update every entry that is using the specific item value. This may affect multiple objects.");
	}

}